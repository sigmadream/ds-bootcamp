[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS Bootcamp 2024",
    "section": "",
    "text": "0.1 소개\nPNU의 2024년 겨울방학에 진행된 DS Bootcamp에 사용된 실습 내용 입니다. 데이터 관련 대학원 석사 연구생분들이 향후 자신의 연구를 위해서 필요한 연구 역량 강화를 목적으로 진행된 과정입니다.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>DS Bootcamp 2024, 파이썬 특강</span>"
    ]
  },
  {
    "objectID": "index.html#강의자료",
    "href": "index.html#강의자료",
    "title": "DS Bootcamp 2024",
    "section": "0.2 강의자료",
    "text": "0.2 강의자료\n\n강의계획서",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>DS Bootcamp 2024, 파이썬 특강</span>"
    ]
  },
  {
    "objectID": "index.html#ref.",
    "href": "index.html#ref.",
    "title": "DS Bootcamp 2024",
    "section": "0.3 Ref.",
    "text": "0.3 Ref.\n\nThe Python Tutorial\nStreamlit\nGradio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>DS Bootcamp 2024, 파이썬 특강</span>"
    ]
  },
  {
    "objectID": "ds-camp01.html",
    "href": "ds-camp01.html",
    "title": "2  개발 환경 구성 및 실습",
    "section": "",
    "text": "2.1 {Ana, Mini}Conda 설치",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>개발 환경 구성 및 실습</span>"
    ]
  },
  {
    "objectID": "ds-camp01.html#ana-miniconda-설치",
    "href": "ds-camp01.html#ana-miniconda-설치",
    "title": "2  개발 환경 구성 및 실습",
    "section": "",
    "text": "2.1.1 Conda?!\n\n왜 Conda를 사용하는가?\n\nconda는 과학 컴퓨팅, 데이터 과학 및 기계 학습을 위한 Python(파이썬) 및 R 프로그래밍 언어의 오픈 소스 배포판입니다. conda에는 NumPy, Pandas, Matplotlib, SciPy, scikit-learn, TensorFlow 및 PyTorch와 같은 라이브러리를 포함하여 1,500개 이상의 인기 있는 파이썬 및 R 패키지 모음이 포함되어 있습니다. 이러한 패키지는 일반적으로 데이터 분석, 기계 학습, 통계 모델링 및 기타 과학 컴퓨팅 작업에 사용됩니다.\nconda는 패키지 관리 시스템을 지칭합니다. 해당 관리 시스템을 사용해서 패키지 설치, 버전 제어 및 종속성 관리를 처리하는 교차 플랫폼 패키지 관리자입니다. 이를 통해 사용자는 서로 다른 버전의 패키지 및 종속성을 충돌 없이 설치할 수 있는 “conda 환경”이라는 격리된 소프트웨어 환경을 만들 수 있습니다.\nAnaconda는 Windows, macOS 및 Linux를 포함한 다양한 운영 체제를 지원합니다. 서로 다른 플랫폼에서 일관된 개발 환경을 제공하여 다른 사람들과 더 쉽게 공동 작업하고 코드를 공유할 수 있습니다. 이외에도 Anaconda Navigator라는 통합 개발 환경(IDE)도 제공합니다. Navigator는 패키지 관리, conda 환경 생성 및 관리, Jupyter Notebook 및 JupyterLab과 같은 애플리케이션 실행을 위한 그래픽 사용자 인터페이스를 제공합니다.\nAnaconda는 사용 편의성, 광범위한 패키지 라이브러리 및 강력한 패키지 관리 시스템으로 인해 데이터 과학, 기계 학습 및 과학 컴퓨팅 분야에서 널리 사용됩니다. 이러한 도메인에 대한 개발 환경을 설정하고 유지 관리하는 프로세스를 단순화하여 데이터 과학자, 연구원 및 개발자 사이에서 널리 선택됩니다.\n\nConda 설치 방법\nAnaconda를 다운로드 하세요. \n다운로드 받은 파일을 실행 후 설치를 진행하세요,.\n모든 사용자(All Users)를 선택하세요.\n\n\n\n“아나콘다 설치시 모든 사용자를 선택하세요”\n\n\n설치 옵션을 모두 선택하세요.\n\n\n\n“아나콘다 설치시 모든 옵션을 선택하세요”\n\n\n설치 후 확인\n\n\n\n“설치 후 터미널에서 확인”\n\n\n\n\n\n2.1.2 VSCode\n\nVSCode 다운로드 후 설치하세요.\nVSCode 설치시 관련 옵션은 모두 선택하세요.\n\n\n\n“VSCode 설치 옵션”\n\n\nVSCode 설치 후 Python 확장 프로그램 설치하세요.\n\n\n\n“확장 프로그램 설치”\n\n\nPython 확장 프로그램 설치 후 아나콘다의 파이썬과 연결 후 파일 실행\n\n\n\n“파이썬과 VSCode 연결”",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>개발 환경 구성 및 실습</span>"
    ]
  },
  {
    "objectID": "ds-camp02.html",
    "href": "ds-camp02.html",
    "title": "3  제어문과 정렬 알고리즘",
    "section": "",
    "text": "3.1 실습1. 거품 정렬(Astrachan (2003))\ndata = [0,3,1,2,5,10,5,33,1]\nprint(data)\nfor i in range(len(data)-1,0,-1):\n    for j in range(i):\n        if data[j] &gt; data[j + 1]:\n            data[j], data[j + 1] = data[j + 1], data[j]\nprint(data)\n\n[0, 3, 1, 2, 5, 10, 5, 33, 1]\n[0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>제어문과 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp02.html#실습2.-선택-정렬mishra2008selection",
    "href": "ds-camp02.html#실습2.-선택-정렬mishra2008selection",
    "title": "3  제어문과 정렬 알고리즘",
    "section": "3.2 실습2. 선택 정렬(Mishra and Garg (2008))",
    "text": "3.2 실습2. 선택 정렬(Mishra and Garg (2008))\n\ndata = [0,3,1,2,5,10,5,33,1]\nprint(data)\nfor i in range(len(data)):\n    idx = i\n    for j in range(i+1, len(data)):\n        if data[idx] &gt; data[j]: \n            idx = j\n    data[i], data[idx] = data[idx], data[i]\nprint(data)\n\n[0, 3, 1, 2, 5, 10, 5, 33, 1]\n[0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>제어문과 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp02.html#실습3.-삽입-정렬sodhi2013enhanced",
    "href": "ds-camp02.html#실습3.-삽입-정렬sodhi2013enhanced",
    "title": "3  제어문과 정렬 알고리즘",
    "section": "3.3 실습3. 삽입 정렬(Sodhi, Kaur, and Kaur (2013))",
    "text": "3.3 실습3. 삽입 정렬(Sodhi, Kaur, and Kaur (2013))\n\ndata = [0,3,1,2,5,10,5,33,1]\nprint(data)\nfor end in range(1, len(data)):\n    for i in range(end, 0, -1):\n        if data[i - 1] &gt; data[i]:\n            data[i - 1], data[i] = data[i], data[i - 1]\nprint(data)\n\n[0, 3, 1, 2, 5, 10, 5, 33, 1]\n[0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>제어문과 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html",
    "href": "ds-camp03.html",
    "title": "4  함수와 정렬 알고리즘",
    "section": "",
    "text": "4.1 실습4. 거품 정렬(Astrachan (2003))\ndef bubble_sort(data = [0,3,1,2,5,10,5,33,1]):    \n    print(\"Input : \", data)\n    for i in range(len(data)-1,0,-1):\n        for j in range(i):\n            if data[j] &gt; data[j + 1]:\n                data[j], data[j + 1] = data[j + 1], data[j]\n    return data\nprint(\"Output : \", bubble_sort())\n\nInput :  [0, 3, 1, 2, 5, 10, 5, 33, 1]\nOutput :  [0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습5.-선택-정렬mishra2008selection",
    "href": "ds-camp03.html#실습5.-선택-정렬mishra2008selection",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.2 실습5. 선택 정렬(Mishra and Garg (2008))",
    "text": "4.2 실습5. 선택 정렬(Mishra and Garg (2008))\n\ndef selection_sort(data = [0,3,1,2,5,10,5,33,1]):\n    print(\"Input : \", data)\n    for i in range(len(data)):\n        idx = i\n        for j in range(i+1, len(data)):\n            if data[idx] &gt; data[j]: \n                idx = j\n        data[i], data[idx] = data[idx], data[i]\n    return data\nprint(\"Output : \", selection_sort())\n\nInput :  [0, 3, 1, 2, 5, 10, 5, 33, 1]\nOutput :  [0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습6.-삽입-정렬sodhi2013enhanced",
    "href": "ds-camp03.html#실습6.-삽입-정렬sodhi2013enhanced",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.3 실습6. 삽입 정렬(Sodhi, Kaur, and Kaur (2013))",
    "text": "4.3 실습6. 삽입 정렬(Sodhi, Kaur, and Kaur (2013))\n\ndef insertion_sort(data = [0,3,1,2,5,10,5,33,1]):\n    print(\"Input : \", data)\n    for end in range(1, len(data)):\n        for i in range(end, 0, -1):\n            if data[i - 1] &gt; data[i]:\n                data[i - 1], data[i] = data[i], data[i - 1]\n    return data\nprint(\"Output : \", insertion_sort())\n\nInput :  [0, 3, 1, 2, 5, 10, 5, 33, 1]\nOutput :  [0, 1, 1, 2, 3, 5, 5, 10, 33]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습7.-퀵-정렬hoare1962quicksort",
    "href": "ds-camp03.html#실습7.-퀵-정렬hoare1962quicksort",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.4 실습7. 퀵 정렬(Hoare (1962))",
    "text": "4.4 실습7. 퀵 정렬(Hoare (1962))\n\ndef quick_sort(l=[3, 0, 1, 8, 7, 2, 5, 4, 6, 9]):\n    if len(l) &lt;= 1:\n        return l\n    pivot = l[len(l) // 2]\n    lesser_arr, equal_arr, greater_arr = [], [], []\n    for num in l:\n        if num &lt; pivot:\n            lesser_arr.append(num)\n        elif num &gt; pivot:\n            greater_arr.append(num)\n        else:\n            equal_arr.append(num)\n    return quick_sort(lesser_arr) + equal_arr + quick_sort(greater_arr)\n\nprint(quick_sort())\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습8재귀-문자열-뒤집기",
    "href": "ds-camp03.html#실습8재귀-문자열-뒤집기",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.5 실습8(재귀) 문자열 뒤집기",
    "text": "4.5 실습8(재귀) 문자열 뒤집기\n\ndef reverse_recursive(s=\"HelloWorld\"):\n    if not s: return []\n    return [s[-1]] + reverse_recursive(s[:-1])\nprint(\"\".join(reverse_recursive()))\n\ndlroWolleH",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습9재귀.-리스트에서-원소-가져오기",
    "href": "ds-camp03.html#실습9재귀.-리스트에서-원소-가져오기",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.6 실습9(재귀). 리스트에서 원소 가져오기",
    "text": "4.6 실습9(재귀). 리스트에서 원소 가져오기\n\ndef take_recursive(l=[1,2,3,4,5,6],n=2):\n    if n &lt;= 0 or not l: return []\n    return [l[0]] + take_recursive(l[1:], n-1)\nprint(take_recursive(n=4))\n\n[1, 2, 3, 4]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습10재귀.-두-리스트를-결합",
    "href": "ds-camp03.html#실습10재귀.-두-리스트를-결합",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.7 실습10(재귀). 두 리스트를 결합",
    "text": "4.7 실습10(재귀). 두 리스트를 결합\n\ndef combine_recursive(l=[1,2,3,4,5,6,7], r=[100,200,300]):\n    if not l: return r\n    return [l[0]] + combine_recursive(l[1:], r)\nprint(combine_recursive())\n\n[1, 2, 3, 4, 5, 6, 7, 100, 200, 300]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습11꼬리재귀.-문자열-뒤집기",
    "href": "ds-camp03.html#실습11꼬리재귀.-문자열-뒤집기",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.8 실습11(꼬리재귀). 문자열 뒤집기",
    "text": "4.8 실습11(꼬리재귀). 문자열 뒤집기\n\ndef reverse_tail(l=\"Hello World\", acc=[]):\n    if not l: return acc\n    return reverse_tail(l[1:], [l[0]] + acc)\nprint(\"\".join(reverse_tail()))\n\ndlroW olleH",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습12꼬리재귀.-리스트에서-원소-가져오기",
    "href": "ds-camp03.html#실습12꼬리재귀.-리스트에서-원소-가져오기",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.9 실습12(꼬리재귀). 리스트에서 원소 가져오기",
    "text": "4.9 실습12(꼬리재귀). 리스트에서 원소 가져오기\n\ndef take_tail(l=[1,2,3,4,5,6], n=2, acc=[]):\n    if n &lt;= 0 or not l: return acc\n    return take_tail(l[1:], n-1, acc + [l[0]])\nprint(take_tail())\n\n[1, 2]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#실습13꼬리재귀.-두-리스트-결합",
    "href": "ds-camp03.html#실습13꼬리재귀.-두-리스트-결합",
    "title": "4  함수와 정렬 알고리즘",
    "section": "4.10 실습13(꼬리재귀). 두 리스트 결합",
    "text": "4.10 실습13(꼬리재귀). 두 리스트 결합\n\ndef combine_tail(l=[1,2,3,4,5,6], r=[100,200,300], acc=[]):\n    if not l and not r:\n        return acc\n    elif l:\n        return combine_tail(l[1:], r, acc + [l[0]])\n    else:\n        return combine_tail(l, r[1:], acc + [r[0]])\nprint(combine_tail())\n\n[1, 2, 3, 4, 5, 6, 100, 200, 300]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#과제2b---병합-정렬knuth1998taocp3",
    "href": "ds-camp03.html#과제2b---병합-정렬knuth1998taocp3",
    "title": "4  함수와 정렬 알고리즘",
    "section": "5.1 과제2(b) - 병합 정렬(Knuth (1998))",
    "text": "5.1 과제2(b) - 병합 정렬(Knuth (1998))\n\ndef merge_recursive(left, right):\n    if not left:\n        return right\n    if not right:\n        return left\n    if left[0] &lt; right[0]:\n        return [left[0]] + merge_recursive(left[1:], right)\n    return [right[0]] + merge_recursive(left, right[1:])\n\ndef merge_sort_recursive(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort_recursive(arr[:mid])\n    right = merge_sort_recursive(arr[mid:])\n    return merge_recursive(left, right)\n\n\nmerge_sort = merge_sort_recursive(data)\nprint(merge_sort)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp03.html#과제2c---병합-정렬knuth1998taocp3",
    "href": "ds-camp03.html#과제2c---병합-정렬knuth1998taocp3",
    "title": "4  함수와 정렬 알고리즘",
    "section": "5.2 과제2(c) - 병합 정렬(Knuth (1998))",
    "text": "5.2 과제2(c) - 병합 정렬(Knuth (1998))\n\ndef merge_tail_recursive(left, right, acc):\n    if not left:\n        return acc + right\n    if not right:\n        return acc + left\n    if left[0] &lt; right[0]:\n        return merge_tail_recursive(left[1:], right, acc + [left[0]])\n    return merge_tail_recursive(left, right[1:], acc + [right[0]])\n\ndef merge_sort_tail_recursive(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort_tail_recursive(arr[:mid])\n    right = merge_sort_tail_recursive(arr[mid:])\n    return merge_tail_recursive(left, right, [])\n\n\nmerge_sort = merge_sort_tail_recursive(data)\nprint(merge_sort)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\nAstrachan, Owen. 2003. “Bubble Sort: An Archaeological Algorithmic Analysis.” ACM Sigcse Bulletin 35 (1): 1–5.\n\n\nHoare, Charles AR. 1962. “Quicksort.” The Computer Journal 5 (1): 10–16.\n\n\nKnuth, Donald. 1998. The Art of Computer Programming. Vol. 3 (2nd Ed.). Addison-Wesley.\n\n\nMishra, Aditya Dev, and Deepak Garg. 2008. “Selection of Best Sorting Algorithm.” International Journal of Intelligent Information Processing 2 (2): 363–68.\n\n\nSodhi, Tarundeep Singh, Surmeet Kaur, and Snehdeep Kaur. 2013. “Enhanced Insertion Sort Algorithm.” International Journal of Computer Applications 64 (21).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수와 정렬 알고리즘</span>"
    ]
  },
  {
    "objectID": "ds-camp04.html",
    "href": "ds-camp04.html",
    "title": "5  리스트(list), 파일 입출력 그리고 CSV",
    "section": "",
    "text": "5.1 멜론 top100(v1) - 함수와 리스트를 사용한 CSV 파일 처리\ndef data_loading(filename):\n    f = open(filename, \"r\", encoding=\"utf-8\")\n    top100 = []\n    f.readline()\n    for i in f.readlines():\n        top100.append(i.strip().split(\",\"))\n    f.close()\n    return top100\n\ndef get_artist_names(data):\n    artists = []\n    for song in data:\n        if song[3] not in artists:\n            artists.append(song[3])\n    return artists\n\ndef find_song_id(data, artist_name):\n    ids = []\n    for i in data:\n        if (\n            i[3].replace(\" \", \"\").lower().find(artist_name.replace(\" \", \"\").lower())\n            != -1\n        ):\n            ids.append(i[0])\n    return ids\n\ndef find_song_info(data, song_id):\n    for i in data:\n        if i[0] == str(song_id):\n            return i\n    return None\n\ndef count_all_song(data):\n    artists = []\n    for row in data:\n        if row[3] not in artists:\n            artists.append(row[3])\n    artists_count = {}\n    for artist in artists:\n        m = 0\n        artists_count[artist] = 0\n        for row in data:\n            if artist == row[3]:\n                artists_count[artist] += 1\n    return artists_count\n\nif __name__ == \"__main__\":\n    top100 = data_loading(\"data/melon-top100.csv\")\n    print(\"get_artist_names : \", get_artist_names(top100[0:5]))\n    song_id = find_song_id(top100, \"임영웅\")\n    print(\"song_id : \", song_id)\n    song_info = find_song_info(top100, song_id[0])\n    print(\"song_info : \", song_info)\n    print(\"count_all_song : \", count_all_song(top100))\n\nget_artist_names :  ['IVE (아이브)', '지수 (JISOO)', 'Agust D', 'NewJeans']\nsong_id :  ['34061322', '34908740', '35008524', '35834583', '35834584', '32508053', '35008525', '35008527', '35008528', '35008534', '35008526', '35008531', '35008532', '35008530']\nsong_info :  ['34061322', '사랑은 늘 도망가', '신사와 아가씨 OST Part.2', '임영웅']\ncount_all_song :  {'IVE (아이브)': 5, '지수 (JISOO)': 1, 'Agust D': 3, 'NewJeans': 6, '임영웅': 14, 'STAYC(스테이씨)': 1, '볼빨간사춘기': 2, '지민': 2, '윤하 (YOUNHA)': 2, 'Charlie Puth': 4, 'Zior Park': 1, '부석순 (SEVENTEEN)': 1, 'NMIXX': 1, 'DK(디셈버)': 2, '임한별': 1, '던 (DAWN)': 1, 'NCT 도재정': 6, 'LE SSERAFIM (르세라핌)': 2, '주주 시크릿': 1, 'FIFTY FIFTY': 1, '우디 (Woody)': 2, '지아': 1, 'imase': 1, '방탄소년단': 4, '멜로망스': 1, 'j-hope': 1, '성시경': 1, '송하예': 1, 'H1-KEY (하이키)': 1, '#안녕': 2, 'NCT DREAM': 1, '(여자)아이들': 2, '태양': 1, '포맨 (4MEN)': 1, 'Say Yes!': 1, '테이': 1, 'BLACKPINK': 2, 'The Kid LAROI': 1, '박재정': 1, '지코 (ZICO)': 1, '김민석 (멜로망스)': 1, '김호중': 2, '주호': 1, 'WSG워너비 (가야G)': 2, 'BIG Naughty (서동현)': 2, '한동근': 1, ' Stupid\"': 1, '10CM': 1, '경서예지': 1, ' Every Moment)\"': 1, '먼데이 키즈 (Monday Kiz)': 1, '헤이즈 (Heize)': 1, 'Aimyon': 1}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>리스트(list), 파일 입출력 그리고 CSV</span>"
    ]
  },
  {
    "objectID": "ds-camp04.html#멜론-top100v2---함수-딕셔너리-그리고-모듈을-사용한-csv-파일-처리",
    "href": "ds-camp04.html#멜론-top100v2---함수-딕셔너리-그리고-모듈을-사용한-csv-파일-처리",
    "title": "5  리스트(list), 파일 입출력 그리고 CSV",
    "section": "5.2 멜론 top100(v2) - 함수, 딕셔너리 그리고 모듈을 사용한 CSV 파일 처리",
    "text": "5.2 멜론 top100(v2) - 함수, 딕셔너리 그리고 모듈을 사용한 CSV 파일 처리\n\nimport csv\n\ndef data_loading(filename):\n    with open(filename, \"r\", encoding=\"utf-8\") as f:\n        reader = csv.DictReader(f)\n        result = list(reader)\n    return result\n\ndef get_artist_names(data):\n    artists = {}\n    for song in data:\n        artists[song[\"artist\"]] = None\n    return list(artists.keys())\n\ndef find_song_id(data, artist_name):\n    ids = []\n    artist_name = artist_name.replace(\" \", \"\").lower()\n    for row in data:\n        if (\n            row[\"artist\"].replace(\" \", \"\").lower().find(artist_name.replace(\" \", \"\").lower())\n            != -1\n        ):\n            ids.append(row[\"song_no\"])\n    return ids\n\ndef find_song_info(data, song_id):\n    infos = []\n    for song in data:\n        if  song_id == song[\"song_no\"]:\n            return song\n        \ndef count_all_song(data):\n    count_song = {}\n    for song in top100:\n        if song[\"artist\"] not in count_song:\n            count_song[song[\"artist\"]] = 1\n        else:\n            count_song[song[\"artist\"]] += 1\n    return count_song\n\nif __name__ == \"__main__\":\n    top100 = data_loading(\"data/melon-top100.csv\")\n    print(\"get_artist_names : \", get_artist_names(top100[0:5]))\n    song_id = find_song_id(top100, \"임영웅\")\n    print(\"song_id : \", song_id)\n    song_info = find_song_info(top100, song_id[0])\n    print(\"song_info : \", song_info)\n    print(\"count_all_song : \", count_all_song(top100))\n\nget_artist_names :  ['IVE (아이브)', '지수 (JISOO)', 'Agust D', 'NewJeans']\nsong_id :  ['34061322', '34908740', '35008524', '35834583', '35834584', '32508053', '35008525', '35008527', '35008528', '35008534', '35008526', '35008531', '35008532', '35008530']\nsong_info :  {'song_no': '34061322', 'title': '사랑은 늘 도망가', 'album': '신사와 아가씨 OST Part.2', 'artist': '임영웅'}\ncount_all_song :  {'IVE (아이브)': 5, '지수 (JISOO)': 1, 'Agust D': 3, 'NewJeans': 6, '임영웅': 14, 'STAYC(스테이씨)': 1, '볼빨간사춘기': 2, '지민': 2, '윤하 (YOUNHA)': 2, 'Charlie Puth': 4, 'Zior Park': 1, '부석순 (SEVENTEEN)': 1, 'NMIXX': 2, 'DK(디셈버)': 2, '임한별': 1, '던 (DAWN)': 1, 'NCT 도재정': 6, 'LE SSERAFIM (르세라핌)': 2, '주주 시크릿': 1, 'FIFTY FIFTY': 1, '우디 (Woody)': 2, '지아': 1, 'imase': 1, '방탄소년단': 4, '멜로망스': 1, 'j-hope': 1, '성시경': 1, '송하예': 1, 'H1-KEY (하이키)': 1, '#안녕': 2, 'NCT DREAM': 1, '(여자)아이들': 2, '태양': 1, '포맨 (4MEN)': 1, 'Say Yes!': 1, '테이': 1, 'BLACKPINK': 2, 'The Kid LAROI': 1, '박재정': 1, '지코 (ZICO)': 1, '김민석 (멜로망스)': 1, '김호중': 2, '주호': 1, 'WSG워너비 (가야G)': 2, 'BIG Naughty (서동현)': 2, '한동근': 1, '10CM': 1, '경서예지': 1, '폴킴': 1, '먼데이 키즈 (Monday Kiz)': 1, '헤이즈 (Heize)': 1, 'Aimyon': 1}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>리스트(list), 파일 입출력 그리고 CSV</span>"
    ]
  },
  {
    "objectID": "ds-camp04.html#멜론-top100v3---collections을-사용한-csv-파일-처리",
    "href": "ds-camp04.html#멜론-top100v3---collections을-사용한-csv-파일-처리",
    "title": "5  리스트(list), 파일 입출력 그리고 CSV",
    "section": "5.3 멜론 top100(v3) - Collections을 사용한 CSV 파일 처리",
    "text": "5.3 멜론 top100(v3) - Collections을 사용한 CSV 파일 처리\n\nimport csv\nfrom collections import Counter\n\ndef data_loading(filename):\n    with open(filename, \"r\", encoding=\"utf-8\") as f:\n        reader = csv.DictReader(f)\n        result = list(reader)\n    return result\n\ndef get_artist_names(data):\n    return [{song[\"artist\"] for song in data}]\n\ndef find_song_id(data, artist_name):\n    is_find = lambda x: x.replace(\" \", \"\").lower().find(artist_name.replace(\" \", \"\").lower())\n    ids = [song[\"song_no\"] for song in data if is_find(song[\"artist\"]) != -1]\n    return ids\n\ndef find_song_info(data, song_id):\n    return [song for song in data if song[\"song_no\"] == song_id]\n\ndef count_all_song(data):\n    artists = [song[\"artist\"] for song in data]\n    return Counter(artists)\n\nif __name__ == \"__main__\":\n    top100 = data_loading(\"data/melon-top100.csv\")\n    print(\"get_artist_names : \", get_artist_names(top100[0:5]))\n    song_id = find_song_id(top100, \"임영웅\")\n    print(\"song_id : \", song_id)\n    song_info = find_song_info(top100, song_id[0])\n    print(\"song_info : \", song_info)\n    print(\"count_all_song : \", count_all_song(top100))\n\nget_artist_names :  [{'지수 (JISOO)', 'Agust D', 'NewJeans', 'IVE (아이브)'}]\nsong_id :  ['34061322', '34908740', '35008524', '35834583', '35834584', '32508053', '35008525', '35008527', '35008528', '35008534', '35008526', '35008531', '35008532', '35008530']\nsong_info :  [{'song_no': '34061322', 'title': '사랑은 늘 도망가', 'album': '신사와 아가씨 OST Part.2', 'artist': '임영웅'}]\ncount_all_song :  Counter({'임영웅': 14, 'NewJeans': 6, 'NCT 도재정': 6, 'IVE (아이브)': 5, 'Charlie Puth': 4, '방탄소년단': 4, 'Agust D': 3, '볼빨간사춘기': 2, '지민': 2, '윤하 (YOUNHA)': 2, 'NMIXX': 2, 'DK(디셈버)': 2, 'LE SSERAFIM (르세라핌)': 2, '우디 (Woody)': 2, '#안녕': 2, '(여자)아이들': 2, 'BLACKPINK': 2, '김호중': 2, 'WSG워너비 (가야G)': 2, 'BIG Naughty (서동현)': 2, '지수 (JISOO)': 1, 'STAYC(스테이씨)': 1, 'Zior Park': 1, '부석순 (SEVENTEEN)': 1, '임한별': 1, '던 (DAWN)': 1, '주주 시크릿': 1, 'FIFTY FIFTY': 1, '지아': 1, 'imase': 1, '멜로망스': 1, 'j-hope': 1, '성시경': 1, '송하예': 1, 'H1-KEY (하이키)': 1, 'NCT DREAM': 1, '태양': 1, '포맨 (4MEN)': 1, 'Say Yes!': 1, '테이': 1, 'The Kid LAROI': 1, '박재정': 1, '지코 (ZICO)': 1, '김민석 (멜로망스)': 1, '주호': 1, '한동근': 1, '10CM': 1, '경서예지': 1, '폴킴': 1, '먼데이 키즈 (Monday Kiz)': 1, '헤이즈 (Heize)': 1, 'Aimyon': 1})",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>리스트(list), 파일 입출력 그리고 CSV</span>"
    ]
  },
  {
    "objectID": "ds-camp05.html",
    "href": "ds-camp05.html",
    "title": "6  클래스, 객체를 사용한 CSV 구조화",
    "section": "",
    "text": "6.1 멜론 top100을 클래스 형식으로 재구성하기\nimport csv\nfrom collections import Counter\n\nclass MelonTop100:\n    def __init__(self, filename=\"melon-top100.csv\"):\n        self.top100 = self.data_loading(filename)\n\n    def data_loading(self, filename):\n        with open(filename, \"r\", encoding=\"utf-8\") as f:\n            reader = csv.DictReader(f)\n            result = list(reader)\n        return result\n\n    def get_artist_names(self):\n        return [{song[\"artist\"] for song in self.top100}]\n\n    def find_song_id(self, artist_name):\n        is_find = lambda x: x.replace(\" \", \"\").lower().find(artist_name.replace(\" \", \"\").lower())\n        ids = [song[\"song_no\"] for song in self.top100 if is_find(song[\"artist\"]) != -1]\n        return ids\n\n    def find_song_info(self, song_id):\n        return [song for song in self.top100 if song[\"song_no\"] == song_id]\n\n    def count_all_song(self):\n        artists = [song[\"artist\"] for song in self.top100]\n        return Counter(artists)\n\nif __name__ == \"__main__\":\n    top100 = MelonTop100(\"data/melon-top100.csv\")\n    print(\"get_artist_names : \", top100.get_artist_names())\n    song_id = top100.find_song_id(\"임영웅\")\n    print(\"song_id : \", song_id)\n    song_info = top100.find_song_info(song_id[0])\n    print(\"song_info : \", song_info)\n    print(\"count_all_song : \", top100.count_all_song())\n\nget_artist_names :  [{'WSG워너비 (가야G)', 'NCT 도재정', 'BIG Naughty (서동현)', '헤이즈 (Heize)', 'Charlie Puth', '지코 (ZICO)', '던 (DAWN)', '볼빨간사춘기', '송하예', 'The Kid LAROI', '박재정', '지수 (JISOO)', '한동근', '먼데이 키즈 (Monday Kiz)', 'BLACKPINK', '(여자)아이들', 'H1-KEY (하이키)', '주주 시크릿', 'Say Yes!', '멜로망스', '10CM', '태양', 'NMIXX', '방탄소년단', 'Agust D', 'LE SSERAFIM (르세라핌)', '폴킴', '임영웅', '주호', '지아', 'IVE (아이브)', 'NCT DREAM', 'STAYC(스테이씨)', '우디 (Woody)', 'imase', '테이', '포맨 (4MEN)', 'NewJeans', 'Zior Park', '김호중', '지민', 'j-hope', '임한별', 'FIFTY FIFTY', '김민석 (멜로망스)', '경서예지', '#안녕', '부석순 (SEVENTEEN)', 'DK(디셈버)', 'Aimyon', '성시경', '윤하 (YOUNHA)'}]\nsong_id :  ['34061322', '34908740', '35008524', '35834583', '35834584', '32508053', '35008525', '35008527', '35008528', '35008534', '35008526', '35008531', '35008532', '35008530']\nsong_info :  [{'song_no': '34061322', 'title': '사랑은 늘 도망가', 'album': '신사와 아가씨 OST Part.2', 'artist': '임영웅'}]\ncount_all_song :  Counter({'임영웅': 14, 'NewJeans': 6, 'NCT 도재정': 6, 'IVE (아이브)': 5, 'Charlie Puth': 4, '방탄소년단': 4, 'Agust D': 3, '볼빨간사춘기': 2, '지민': 2, '윤하 (YOUNHA)': 2, 'NMIXX': 2, 'DK(디셈버)': 2, 'LE SSERAFIM (르세라핌)': 2, '우디 (Woody)': 2, '#안녕': 2, '(여자)아이들': 2, 'BLACKPINK': 2, '김호중': 2, 'WSG워너비 (가야G)': 2, 'BIG Naughty (서동현)': 2, '지수 (JISOO)': 1, 'STAYC(스테이씨)': 1, 'Zior Park': 1, '부석순 (SEVENTEEN)': 1, '임한별': 1, '던 (DAWN)': 1, '주주 시크릿': 1, 'FIFTY FIFTY': 1, '지아': 1, 'imase': 1, '멜로망스': 1, 'j-hope': 1, '성시경': 1, '송하예': 1, 'H1-KEY (하이키)': 1, 'NCT DREAM': 1, '태양': 1, '포맨 (4MEN)': 1, 'Say Yes!': 1, '테이': 1, 'The Kid LAROI': 1, '박재정': 1, '지코 (ZICO)': 1, '김민석 (멜로망스)': 1, '주호': 1, '한동근': 1, '10CM': 1, '경서예지': 1, '폴킴': 1, '먼데이 키즈 (Monday Kiz)': 1, '헤이즈 (Heize)': 1, 'Aimyon': 1})",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>클래스, 객체를 사용한 CSV 구조화</span>"
    ]
  },
  {
    "objectID": "ds-camp06.html",
    "href": "ds-camp06.html",
    "title": "7  Python 문법 연습 심화(함수 기반)",
    "section": "",
    "text": "worksbook_ds-bootcamp-v1.3.pdf를 참고하여 Python 문법을 연습합니다.\n\n\n# 문제1\ndef greeting(name):\n    print(name + \"님 안녕하세요\")\ngreeting(\"홍길동\")\n\n홍길동님 안녕하세요\n\n\n\n# 문제2\nimport math\ndef area_square(width, height):\n    if type(width) != float or type(height) != float:\n        print(\"실수를 입력하세요\")\n        return None\n    return math.floor(width * height * 100) / 100\narea_square(3.51, 4.223)\n# area_square(3, 4)\n\n14.82\n\n\n\n# 문제3 \ndef restaurant_invoice(bill):\n    tax = 0.10\n    tip = 0.18\n    return bill*tax, bill*tip, bill*(1+tax+tip)\nrestaurant_invoice(100)\n\n(10.0, 18.0, 128.0)\n\n\n\n# 문제4\ndef sum_of_natural_number(n):\n    return n*(n+1)//2\nsum_of_natural_number(10)\n\n55\n\n\n\n# 문제5\ndef old_bread_price(n, price=3.49):\n    return n*price, math.floor(price*0.6*100)/100\nold_bread_price(2)\n\n(6.98, 2.09)\n\n\n\n# 문제6\ndef even_or_odd(n):\n    if n%2 == 0:\n        return \"짝수\"\n    else:\n        return \"홀수\"\neven_or_odd(3)\n\n'홀수'\n\n\n\n\n# 문제7\ndef quadratic_equations(a, b, c):\n    D = b**2-4*a*c\n    if D &gt;= 0:\n        S = -b+math.sqrt(D)/2*a\n        T = -b-math.sqrt(D)/2*a\n        if D &gt; 0:\n            return 2, S, T\n        else:\n            return 1, S\n    else:\n        return 0, None\nprint(quadratic_equations(1, -3, 2))\nprint(quadratic_equations(1, 2, 3))\nprint(quadratic_equations(1, 2, 1))\n\n(2, 3.5, 2.5)\n(0, None)\n(1, -2.0)\n\n\n\n# 문제8\ndef chess_color(p):\n    if (ord(p[0])-ord('a')+int(p[1]))%2 == 0:\n        return \"흰색\"\n    else:\n        return \"검은색\"\nprint(chess_color(\"a1\"))\nprint(chess_color(\"a2\"))\n\n검은색\n흰색\n\n\n\n# 문제9(Tomohiko Sakamoto’s Algorithm)\ndef get_weekday_and_weekname(year):\n    weekname = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n    w = (year+(year-1)//4-(year-1)//100+(year-1)//400)%7\n    return w, weekname[w]\nget_weekday_and_weekname(2023)\n\n(0, '일')\n\n\n\n# 문제10\nfrom random import randrange\ndef roulette_payouts():\n    v = randrange(0, 38)\n    if v == 0 or v == 37:\n        print(\"Pay 0 / 00\")\n    else:\n        print(\"Pay\", v)\n        print(\"Pay Red\" if v%2 == 1 else \"Pay Black\")\n        print(\"Pay Odd\" if v%2 == 1 else \"Pay Even\")\n        print(\"Pay 1 to 18\" if v &lt;= 18 else \"Pay 19 to 36\")\nroulette_payouts()\n\nPay 25\nPay Red\nPay Odd\nPay 19 to 36\n\n\n\n# 문제11\ndef maximum_random_int(NUM_ITEM = 100):    \n    max_value = randrange(1, NUM_ITEM + 1)\n    num_updated = 0\n    for i in range(1, NUM_ITEM):\n        current = randrange(1, NUM_ITEM + 1)\n        if current &gt; max_value:\n            max_value = current\n            num_updated += 1\n            # print(current, \"&lt;== Update\")\n        else:\n            # print(current)\n            pass\n    return max_value, num_updated\n\nmaximum_random_int()\n\n(98, 3)\n\n\n\n# 문제12\ndef draw_multiplication_table_with_labels():\n    # Adjusting the table size for 1 to 10\n    top_border = \"+\" + \"-\"*44 + \"+\"\n    print(top_border)\n    \n    # Print labels for multiplication table\n    label_row = \"|   |\"\n    for i in range(1, 11):\n        label_row += f\"  {i}|\"\n    print(label_row)\n    \n    header_separator = \"+\" + (\"-\"*4 + \"+\")*9\n    print(header_separator)\n    \n    # Body with multiplication results for 1 to 10\n    for row in range(1, 11):\n        row_data = f\"|{row:3d}|\"\n        for col in range(1, 11):\n            row_data += f\"{col*row:3d}|\"\n        print(row_data)\n        \n        # Separator line between rows, except after the last row\n        if row &lt; 10:\n            separator = \"+\" + (\"-\"*4 + \"+\")*9\n            print(separator)\n    \n    # Bottom border\n    bottom_border = \"+\" + \"-\"*45 + \"+\"\n    print(bottom_border)\n\ndraw_multiplication_table_with_labels()\n\n+--------------------------------------------+\n|   |  1|  2|  3|  4|  5|  6|  7|  8|  9|  10|\n+----+----+----+----+----+----+----+----+----+\n|  1|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10|\n+----+----+----+----+----+----+----+----+----+\n|  2|  2|  4|  6|  8| 10| 12| 14| 16| 18| 20|\n+----+----+----+----+----+----+----+----+----+\n|  3|  3|  6|  9| 12| 15| 18| 21| 24| 27| 30|\n+----+----+----+----+----+----+----+----+----+\n|  4|  4|  8| 12| 16| 20| 24| 28| 32| 36| 40|\n+----+----+----+----+----+----+----+----+----+\n|  5|  5| 10| 15| 20| 25| 30| 35| 40| 45| 50|\n+----+----+----+----+----+----+----+----+----+\n|  6|  6| 12| 18| 24| 30| 36| 42| 48| 54| 60|\n+----+----+----+----+----+----+----+----+----+\n|  7|  7| 14| 21| 28| 35| 42| 49| 56| 63| 70|\n+----+----+----+----+----+----+----+----+----+\n|  8|  8| 16| 24| 32| 40| 48| 56| 64| 72| 80|\n+----+----+----+----+----+----+----+----+----+\n|  9|  9| 18| 27| 36| 45| 54| 63| 72| 81| 90|\n+----+----+----+----+----+----+----+----+----+\n| 10| 10| 20| 30| 40| 50| 60| 70| 80| 90|100|\n+---------------------------------------------+\n\n\n\n# 문제13\nfrom decimal import Decimal, getcontext\ngetcontext().prec = 100\n\ndef calculate_pi_to_55th_decimal():\n    pi_approx = Decimal(0)\n    for n in range(100000):\n        pi_approx += Decimal((-1)**n) / Decimal(2*n + 1)\n    pi_approx *= Decimal(4)\n    return pi_approx\npi_to_55th_decimal = calculate_pi_to_55th_decimal()\nprint(str(pi_to_55th_decimal)[:57])\n\n3.1415826535897934884626433520295028937284193939649495759\n\n\n\n# 문제14\ndef calculate_even_parity(bit_string):\n    if len(bit_string) != 8 or not all(bit in \"01\" for bit in bit_string):\n        return None, \"Error: Input must be an 8-bit binary string.\"\n    num_ones = bit_string.count('1')\n    parity_bit = 0 if num_ones % 2 == 0 else 1    \n    return parity_bit, None\n   \nparity_bit, error = calculate_even_parity(\"01010100\")\nif error:\n    print(error)\nelse:\n    print(f\"The even parity bit should be: {parity_bit}\")\n\nThe even parity bit should be: 1\n\n\n\n# 문제15\nimport random\n\ndef simulate_coin_flips():\n    results = \"\"\n    flips_count = 0\n    while not (\"HHH\" in results or \"TTT\" in results):\n        flip = \"H\" if random.randint(0, 1) == 0 else \"T\"\n        results += flip\n        flips_count += 1        \n    return results, flips_count\n\nsimulation_results = [simulate_coin_flips() for _ in range(10)]\naverage_flips = sum(result[1] for result in simulation_results) / 10\n\nfor i, result in enumerate(simulation_results, 1):\n    print(f\"Simulation {i}: {result[0]}, Flips: {result[1]}\")\n\naverage_flips\n\n\nSimulation 1: HHTTHHH, Flips: 7\nSimulation 2: HHH, Flips: 3\nSimulation 3: HHTHTHTTT, Flips: 9\nSimulation 4: TTHHTHTTHTHTHHTTT, Flips: 17\nSimulation 5: HHTTT, Flips: 5\nSimulation 6: THTHHTHHTTHTTT, Flips: 14\nSimulation 7: HTHTHTHTHTHTTT, Flips: 14\nSimulation 8: THHH, Flips: 4\nSimulation 9: HTHTHTTHTHTTT, Flips: 13\nSimulation 10: TTHTHHTHTHHTHHTHTTHTTHTTT, Flips: 25\n\n\n11.1\n\n\n\n# 문제 16\ndef is_sublist(larger, smaller):\n    if not smaller:\n        return True\n    \n    if len(smaller) &gt; len(larger):\n        return False\n    \n    for i in range(len(larger) - len(smaller) + 1):\n        if larger[i:i+len(smaller)] == smaller:\n            return True\n    return False\n\nlarger_list = [1, 2, 3, 4, 5]\nsmaller_list = [2, 3, 4]\nprint(is_sublist(larger_list, smaller_list))  # Expected: True\n\nnon_sublist = [2, 4, 3]\nprint(is_sublist(larger_list, non_sublist))  # Expected: False\n\nTrue\nFalse\n\n\n\n# 문제 17\ndef remove_extremes(values, n):\n    if len(values) &lt; 2 * n:\n        raise ValueError(\"Error: The list does not have enough elements to remove the specified number of extremes.\")\n    sorted_values = sorted(values)\n    modified_list = sorted_values[n:-n]\n    return modified_list\n\nvalues = [10, 1, 5, 6, 2, 8, 3, 7, 9, 4]\nn = 2 \n\ntry:\n    modified_list = remove_extremes(values, n)\n    print(f\"Modified list: {modified_list}\")\n    print(f\"Original list: {values}\")\nexcept ValueError as e:\n    print(e)\n\nModified list: [3, 4, 5, 6, 7, 8]\nOriginal list: [10, 1, 5, 6, 2, 8, 3, 7, 9, 4]\n\n\n\n# 문제 18\ndef best_fit_line(data_points):\n    n = len(data_points)\n    sum_x = sum(point[0] for point in data_points)\n    sum_y = sum(point[1] for point in data_points)\n    sum_xy = sum(point[0] * point[1] for point in data_points)\n    sum_x_squared = sum(point[0]**2 for point in data_points)\n    \n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x**2)\n    \n    b = (sum_y - m * sum_x) / n\n    \n    return m, b\n\n# Example usage\ndata_points = [(1, 1), (2, 2.1), (3, 2.9)]\nslope, intercept = best_fit_line(data_points)\nprint(f\"Slope (m): {slope}, Intercept (b): {intercept}\")\n\nSlope (m): 0.9499999999999993, Intercept (b): 0.10000000000000142\n\n\n\n# 문제19\nimport re\n\ndef tokenize_math_expression(expression):\n    token_pattern = r'\\(|\\)|\\+|-|\\*|/|\\d+'\n    tokens = re.findall(token_pattern, expression)\n    return tokens\n\nexpression = \"3 + (4 - 1) * 5\"\ntokens = tokenize_math_expression(expression)\nprint(f\"Expression: {expression}\")\nprint(f\"Tokens: {tokens}\")\n\nExpression: 3 + (4 - 1) * 5\nTokens: ['3', '+', '(', '4', '-', '1', ')', '*', '5']\n\n\n\n# 문제20\nimport random\n\ndef generate_bingo_card():\n    card = {}\n    ranges = {'B': (1, 15), 'I': (16, 30), 'N': (31, 45), 'G': (46, 60), 'O': (61, 75)}\n    for letter, (start, end) in ranges.items():\n        card[letter] = random.sample(range(start, end+1), 5)\n    return card\n\ndef display_bingo_card(card):\n    print(' B   I   N   G   O')\n    for i in range(5):\n        for letter in 'BINGO':\n            print(f'{card[letter][i]:&gt;2}', end='  ')\n        print()\n\n# 빙고 카드 생성 및 표시\nbingo_card = generate_bingo_card()\ndisplay_bingo_card(bingo_card)\n\n B   I   N   G   O\n 8  30  31  48  74  \n 1  18  34  60  62  \n11  16  37  59  72  \n14  17  33  56  73  \n10  28  35  51  70  \n\n\n\n# 문제21\ndef check_bingo(card):\n    # 가로줄 확인\n    for i in range(5):\n        if all(card[letter][i] == 0 for letter in 'BINGO'):\n            return True\n\n    # 세로줄 확인\n    for letter in 'BINGO':\n        if all(card[letter][i] == 0 for i in range(5)):\n            return True\n\n    # 대각선 확인 (왼쪽 상단에서 오른쪽 하단으로)\n    if all(card[letter][i] == 0 for i, letter in enumerate('BINGO')):\n        return True\n\n    # 대각선 확인 (오른쪽 상단에서 왼쪽 하단으로)\n    if all(card[letter][4-i] == 0 for i, letter in enumerate('BINGO')):\n        return True\n\n    return False\n\n# 테스트를 위한 빙고 카드 예시\n# 가로줄 당첨 예시\nbingo_card_horizontal = {\n    'B': [0, 1, 2, 3, 4],\n    'I': [0, 6, 7, 8, 9],\n    'N': [0, 3, 11, 12, 13],\n    'G': [0, 16, 17, 18, 19],\n    'O': [0, 21, 22, 23, 24]\n}\n\n# 세로줄 당첨 예시\nbingo_card_vertical = {\n    'B': [0, 1, 2, 3, 4],\n    'I': [5, 6, 7, 8, 9],\n    'N': [0, 5, 11, 12, 13],\n    'G': [0, 16, 17, 18, 19],\n    'O': [0, 21, 22, 23, 24]\n}\n\n# 대각선 당첨 예시\nbingo_card_diagonal = {\n    'B': [0, 1, 2, 3, 4],\n    'I': [5, 0, 7, 8, 9],\n    'N': [10, 11, 0, 12, 13],\n    'G': [14, 15, 16, 0, 18],\n    'O': [19, 20, 21, 22, 0]\n}\n\n# 당첨되지 않은 카드 예시\nbingo_card_not_winning = {\n    'B': [0, 1, 2, 3, 4],\n    'I': [5, 6, 7, 8, 9],\n    'N': [10, 11, 1, 12, 13],\n    'G': [14, 15, 16, 17, 18],\n    'O': [19, 20, 21, 22, 23]\n}\n\n# 함수 테스트\nprint(check_bingo(bingo_card_horizontal))  # True가 예상됨\nprint(check_bingo(bingo_card_vertical))    # False가 예상됨, 세로줄 완성이 아니기 때문\nprint(check_bingo(bingo_card_diagonal))    # True가 예상됨\nprint(check_bingo(bingo_card_not_winning)) # False가 예상됨\n\nTrue\nFalse\nTrue\nFalse\n\n\n\n# 문제22\nimport random\n\ndef generate_bingo_calls():\n    calls = []\n    for i in range(1, 76):\n        if i &lt;= 15:\n            calls.append(f'B{i}')\n        elif i &lt;= 30:\n            calls.append(f'I{i}')\n        elif i &lt;= 45:\n            calls.append(f'N{i}')\n        elif i &lt;= 60:\n            calls.append(f'G{i}')\n        else:\n            calls.append(f'O{i}')\n    random.shuffle(calls)\n    return calls\n\ndef update_bingo_card(card, call):\n    letter, number = call[0], int(call[1:])\n    if letter in card and number in card[letter]:\n        index = card[letter].index(number)\n        card[letter][index] = 0\n\ndef simulate_bingo_game():\n    card = generate_bingo_card()\n    calls = generate_bingo_calls()\n    for i, call in enumerate(calls, 1):\n        update_bingo_card(card, call)\n        if check_bingo(card):\n            return i\n    return None \n\ndef simulate_n_games(n):\n    results = [simulate_bingo_game() for _ in range(n)]\n    return min(results), max(results), sum(results) / len(results)\n\nmin_calls, max_calls, avg_calls = simulate_n_games(1000)\nprint(f'최소 호출 수: {min_calls}, 최대 호출 수: {max_calls}, 평균 호출 수: {avg_calls:.2f}')\n\n최소 호출 수: 14, 최대 호출 수: 65, 평균 호출 수: 43.14",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python 문법 연습 심화(함수 기반)</span>"
    ]
  },
  {
    "objectID": "ds-camp07.html",
    "href": "ds-camp07.html",
    "title": "8  Python 문법 연습 심화(토이 프로그램)",
    "section": "",
    "text": "8.1 Sudoku Solver(Pure Python)\nimport platform\nimport os\n\nCLS = \"cls\" if platform.system() == \"Windows\" else \"clear\"\n\ndef make_board(problem):\n    sudoku = []\n    row = []\n    for i in range(len(problem)):\n        row.append(int(problem[i]))\n        if (i+1) % 9 == 0:\n            sudoku.append(row)\n            row = []\n    return sudoku\n    \ndef print_sudoku(board):\n    for i in range(len(board)):\n        if i % 3 == 0 and i != 0:\n            print(\"------+-------+-------\")\n        for j in range(len(board[0])):\n            if j % 3 == 0 and j != 0:\n                print(\"| \", end=\"\")\n            if j == 8:\n                if board[i][j] == 0:\n                    print(\" \")\n                else:\n                    print(board[i][j])\n            else:\n                if board[i][j] == 0:\n                    print(\" \" + \" \", end=\"\")\n                else:\n                    print(str(board[i][j]) + \" \", end=\"\")\n\ndef is_empty(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef is_valid(board, num, pos):\n    for i in range(len(board[0])):\n        if board[pos[0]][i] == num and pos[1] != i:\n            return False\n    for i in range(len(board)):\n        if board[i][pos[1]] == num and pos[0] != i:\n            return False\n    boardx_x = pos[1] // 3\n    boardx_y = pos[0] // 3\n    for i in range(boardx_y*3, boardx_y*3 + 3):\n        for j in range(boardx_x * 3, boardx_x*3 + 3):\n            if board[i][j] == num and (i,j) != pos:\n                return False\n    return True\n\ndef solve(board):\n    find = is_empty(board)\n    if not find:\n        return True\n    else:\n        row, col = find\n    for i in range(1,10):\n        if is_valid(board, i, (row, col)):\n            board[row][col] = i\n            os.system(CLS)\n            print(f\"\\nSolution {row, col}: \\n\")\n            print_sudoku(board)\n            if solve(board):\n                return True\n            board[row][col] = 0\n    return False\n\nif __name__ == \"__main__\":\n    problem = f\"405001068073628500009003070240790030006102005950000021507064213080217050612300007\"\n    board = make_board(problem)\n    print(\"Problem:\")\n    print_sudoku(board)\n    solve(board)\n\nProblem:\n4   5 |     1 |   6 8\n  7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (0, 1): \n\n4 2 5 |     1 |   6 8\n  7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (0, 3): \n\n4 2 5 | 9   1 |   6 8\n  7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (0, 4): \n\n4 2 5 | 9 7 1 |   6 8\n  7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (0, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n  7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (1, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5    \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (1, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4  \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (1, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8   9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4   3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n3   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 4 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 4 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5   3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n3   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4     |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3   |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (6, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (6, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5  \n6 1 2 | 3     |     7\n\nSolution (7, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4 9 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 9 5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 4 9\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (1, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9  \n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (1, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n    9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8   9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 |     3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4   3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n3   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 4 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 4 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 6 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 4 5 3 | 1 7 2\n------+-------+-------\n2 4 8 | 7 9 6 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5   3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 |   7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7  \n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (2, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4   | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9   |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 |   3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 6 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3  \n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (3, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n    6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n3   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7   6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1   2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 |     5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 4   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9   5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (4, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5   |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 |       |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4     |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3   |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 |   2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (5, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5   7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (6, 1): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 |   6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (6, 3): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n  8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 0): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8   | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 2): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 |   5  \n6 1 2 | 3     |     7\n\nSolution (7, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5  \n6 1 2 | 3     |     7\n\nSolution (7, 8): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5 9\n6 1 2 | 3     |     7\n\nSolution (8, 4): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5 9\n6 1 2 | 3 5   |     7\n\nSolution (8, 5): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5 9\n6 1 2 | 3 5 9 |     7\n\nSolution (8, 6): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5 9\n6 1 2 | 3 5 9 | 4   7\n\nSolution (8, 7): \n\n4 2 5 | 9 7 1 | 3 6 8\n1 7 3 | 6 2 8 | 5 9 4\n8 6 9 | 5 4 3 | 1 7 2\n------+-------+-------\n2 4 1 | 7 9 5 | 8 3 6\n7 3 6 | 1 8 2 | 9 4 5\n9 5 8 | 4 3 6 | 7 2 1\n------+-------+-------\n5 9 7 | 8 6 4 | 2 1 3\n3 8 4 | 2 1 7 | 6 5 9\n6 1 2 | 3 5 9 | 4 8 7",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python 문법 연습 심화(토이 프로그램)</span>"
    ]
  },
  {
    "objectID": "ds-camp07.html#sudoku-solvernumpy",
    "href": "ds-camp07.html#sudoku-solvernumpy",
    "title": "8  Python 문법 연습 심화(토이 프로그램)",
    "section": "8.2 Sudoku Solver(Numpy)",
    "text": "8.2 Sudoku Solver(Numpy)\n\nimport numpy as np\n\ndef make_board(problem):\n    return np.array([int(i) for i in problem]).reshape(9,9)\n\ndef print_sudoku(problem):\n    # 인지값 확인\n    assert problem.shape == (9, 9)\n    assert type(problem) == np.ndarray\n    \n    # 출력의 편의성을 위해서 문자열로 변경\n    board_str = problem.astype(str)\n    \n    row_sep = '-'*25\n    for i in range(9):        \n        if i % 3 == 0:\n            print(row_sep)\n        row = board_str[i]\n        print('| '+' '.join(row[0:3])+' | '+' '.join(row[3:6])+' | '+' '.join(row[6:])+' |')\n    print(row_sep)\n\ndef roundup_to_nearest_three(index):\n    roundup_float = np.ceil((index + 1) / 3) * 3 # Add 1 as indices start from 0\n    roundup_int = int(roundup_float)    \n    return roundup_int\n\ndef check_unique(board, row, column):\n    # Get distinct values from row and column\n    row_values = np.unique(board[row,:])\n    col_values = np.unique(board[:,column])\n    \n    # First define the sub cell that the row/column falls into\n    # - This will be a group of 3 in each axis\n    row_end_pos = roundup_to_nearest_three(row)\n    col_end_pos = roundup_to_nearest_three(column)\n    \n    # - Then get distinct values from sub cells\n    box_values = np.unique(board[row_end_pos-3:row_end_pos, \n                                 col_end_pos-3:col_end_pos])\n    \n    # - Bring all into one list\n    all_values = np.concatenate((row_values, col_values, box_values), axis=None)\n    \n    # - Then take the unique values from all of them\n    unique_values = np.unique(all_values)\n    \n    return unique_values\n\ndef fill_values(board, row, column):\n    # We're only interested in values not yet filled\n    if board[row,column] == 0:\n        existing_values = check_unique(board, row, column)\n        potential_values = [value for value in range(1,10) if value not in existing_values]\n        \n        # If there's only one potential solution, overwrite zero with that value\n        if len(potential_values) == 1:\n            board[row,column] = potential_values[0]\n            # print('Row: ', str(row + 1), '& Col: ', str(column + 1), ' overwritten with ', str(potential_values[0]))\n\ndef solve(board):\n    # Restrict to max of 10 loops of the board\n    for i in range(10):    \n        # Loop through table columns & rows\n        for row in range(9):\n            for column in range(9):\n                fill_values(board, row, column)\n                    \n        # print('\\n Loop number ', str(i + 1), ' complete \\n')\n        \n        # Checks array for number of non-filled values remaining\n        zeroes_remaining = np.count_nonzero(board == 0)\n        \n        if zeroes_remaining == 0:\n            # print('Finished!')\n            break\n        else:\n            pass\n            # print(' ', str(zeroes_remaining), ' zeroes left\\n')\n\nif __name__ == \"__main__\":\n    problem = \"405001068073628500009003070240790030006102005950000021507064213080217050612300007\"\n    board = make_board(problem)\n    print(\"Problem:\")\n    print_sudoku(board)\n    print(\"Solve:\")\n    solve(board)\n    print_sudoku(board)\n\nProblem:\n-------------------------\n| 4 0 5 | 0 0 1 | 0 6 8 |\n| 0 7 3 | 6 2 8 | 5 0 0 |\n| 0 0 9 | 0 0 3 | 0 7 0 |\n-------------------------\n| 2 4 0 | 7 9 0 | 0 3 0 |\n| 0 0 6 | 1 0 2 | 0 0 5 |\n| 9 5 0 | 0 0 0 | 0 2 1 |\n-------------------------\n| 5 0 7 | 0 6 4 | 2 1 3 |\n| 0 8 0 | 2 1 7 | 0 5 0 |\n| 6 1 2 | 3 0 0 | 0 0 7 |\n-------------------------\nSolve:\n-------------------------\n| 4 2 5 | 9 7 1 | 3 6 8 |\n| 1 7 3 | 6 2 8 | 5 9 4 |\n| 8 6 9 | 5 4 3 | 1 7 2 |\n-------------------------\n| 2 4 1 | 7 9 5 | 8 3 6 |\n| 7 3 6 | 1 8 2 | 9 4 5 |\n| 9 5 8 | 4 3 6 | 7 2 1 |\n-------------------------\n| 5 9 7 | 8 6 4 | 2 1 3 |\n| 3 8 4 | 2 1 7 | 6 5 9 |\n| 6 1 2 | 3 5 9 | 4 8 7 |\n-------------------------",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python 문법 연습 심화(토이 프로그램)</span>"
    ]
  },
  {
    "objectID": "ds-camp07.html#sudoku-solvernumpy를-사용해서-빠르게-부분해를-찾는-방법",
    "href": "ds-camp07.html#sudoku-solvernumpy를-사용해서-빠르게-부분해를-찾는-방법",
    "title": "8  Python 문법 연습 심화(토이 프로그램)",
    "section": "8.3 Sudoku Solver(Numpy를 사용해서 빠르게 부분해를 찾는 방법)",
    "text": "8.3 Sudoku Solver(Numpy를 사용해서 빠르게 부분해를 찾는 방법)\n\n선형대수를 이용하여 Sudoku Solver를 구현\n\n \n\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\nproblem = \"405001068073628500009003070240790030006102005950000021507064213080217050612300007\"\nboard = np.array([int(i) for i in problem]).reshape(9,9)\nprint(board.strides)\n\ndef as_subsquares(board):\n    S =board.itemsize\n    ast = as_strided(board, shape=(3,3,3,3), strides=(S*27, S*3, S*9, S)).reshape(9,3,3)\n    return ast.copy()\n\ndef as_board(subsqrs):\n    a = subsqrs.reshape(3,3,3,3)\n    a = np.hstack(a)\n    b = np.hstack(a)\n    return b.copy()\n\ndef as_subcuboids(cube):\n    S = cube.itemsize\n    cuboids = as_strided(cube, shape=(3,3,3,3,3,3), strides=( S*27, S*3, S*81*3, S*81, S*9, S)).reshape(9,9,3,3)\n    return cuboids.copy()\n\ndef create_validation_cube():\n    corner_rod = np.arange(1,10)\n    c2d = corner_rod[:,None]*np.ones((9,9))\n    c3d = c2d[:,:,None]*np.ones((9,9,9))\n    return c3d\n\ndef eliminate_cube(cube, board, pts):\n    x,y = pts\n    elm = board[x, y]\n    cube[elm-1,x, :] = 0\n    cube[elm-1, :, y] = 0\n    cube[:, x, y] = 0\n    start_x, start_y= x//3*3,  y//3*3\n    end_x, end_y = start_x + 3, start_y + 3\n    cube[elm-1, start_x:end_x, start_y:end_y] = 0\n\ndef validate_insertion(elm, pt, cube, board):\n    x,y = pt\n    bkp_brd_elm = board[x,y]\n    board[x,y] = elm\n    bkp_vcube_plane = cube[elm-1, ...]\n    cube[elm-1, x, :] = 0\n    cube[elm-1, :, y] = 0\n    bkp_vcube_xy = cube[:, x, y]\n    cube[:, x, y] = 0\n    start_x, start_y= x//3*3,  y//3*3\n    end_x, end_y = start_x + 3, start_y + 3\n    cube[elm-1, start_x:end_x, start_y:end_y] = 0\n    cuboids = as_subcuboids(cube)\n    bsqrs = as_subsquares(board)\n    \n    valid_insertion = True\n    for bblck, cuboid in zip(bsqrs, cuboids):\n        nonzero_elms = bblck[bblck!=0]\n        absent_elms = np.setdiff1d(np.arange(9)+1, nonzero_elms)        \n        count_present_elms_from_board_block = len(nonzero_elms)\n        count_present_elms_from_cuboid = (~np.any(cuboid[nonzero_elms-1,...], axis=(1,2))).sum()\n        if count_present_elms_from_cuboid != count_present_elms_from_board_block:\n            valid_insertion = False\n            break\n        count_absent_elms_from_cuboid = np.any(cuboid[absent_elms-1,...], axis=(1,2)).sum()\n        count_absent_elms_from_board_block = np.count_nonzero(bblck==0)\n        if count_absent_elms_from_cuboid != count_absent_elms_from_board_block:\n            valid_insertion = False\n            break\n    cube[:,x,y] = bkp_vcube_xy\n    cube[elm-1,...] = bkp_vcube_plane\n    board[x,y] = bkp_brd_elm\n    return valid_insertion\n\nprint(board)\nprint(\"Start\")\nprev_board = board.copy()\nrepeat = 0\nstep = 1\n\nnon_zero_indices = np.transpose(prev_board.nonzero())\nvcube = create_validation_cube()\n\nwhile True:\n    print(f\"Step - {step}\")\n    for pt in non_zero_indices:\n        eliminate_cube(vcube, prev_board, pt)\n    cuboids = as_subcuboids(vcube)\n    subsqrs = as_subsquares(prev_board)\n    new_non_zero_pts = []\n    for sqr_idx, zipped in enumerate(zip(cuboids, subsqrs)):\n        cuboid, sb_sqr = zipped\n        mask_count1 = (np.bincount(cuboid.nonzero()[0], minlength=9)==1)\n        planes_with_1_elm = cuboid[mask_count1,...]\n        plane_with_1_elm = np.sum(planes_with_1_elm, axis=0)\n        zero_count = np.count_nonzero(plane_with_1_elm==0)\n        if (plane_with_1_elm.size == 0) or (zero_count==9):\n            continue\n        elm_plane_x, elm_plane_y = plane_with_1_elm.nonzero()\n        sb_sqr[elm_plane_x, elm_plane_y] = plane_with_1_elm[elm_plane_x, elm_plane_y]\n        brd_x = sqr_idx//3*3 + elm_plane_x\n        brd_y = sqr_idx%3*3  + elm_plane_y\n        new_non_zero_pts.append(np.transpose((brd_x, brd_y)))\n    solved_board = as_board(subsqrs)\n    print(solved_board)\n    if len(new_non_zero_pts)&gt;1:\n       new_non_zero_pts = np.vstack(new_non_zero_pts)\n       non_zero_indices = new_non_zero_pts\n    count_zero = np.count_nonzero(solved_board==0)\n    if count_zero == 0:\n        break\n    elif np.array_equal(solved_board, prev_board):\n        repeat += 1\n    else:\n        print(f\"Places left to be filled : {count_zero}\")\n        prev_board = solved_board\n    if repeat != 0:\n        print(\"Board repeated. Partial solution acheived.\")\n        print(\"Need backtracking solution.\")\n        break\n    step += 1\n\n(36, 4)\n[[4 0 5 0 0 1 0 6 8]\n [0 7 3 6 2 8 5 0 0]\n [0 0 9 0 0 3 0 7 0]\n [2 4 0 7 9 0 0 3 0]\n [0 0 6 1 0 2 0 0 5]\n [9 5 0 0 0 0 0 2 1]\n [5 0 7 0 6 4 2 1 3]\n [0 8 0 2 1 7 0 5 0]\n [6 1 2 3 0 0 0 0 7]]\nStart\nStep - 1\n[[4 0 5 9 7 1 3 6 8]\n [0 7 3 6 2 8 5 0 0]\n [8 6 9 0 0 3 1 7 2]\n [2 4 1 7 9 5 0 3 0]\n [7 0 6 1 0 2 0 0 5]\n [9 5 0 0 0 0 0 2 1]\n [5 9 7 0 6 4 2 1 3]\n [3 8 4 2 1 7 0 5 0]\n [6 1 2 3 0 0 0 0 7]]\nPlaces left to be filled : 24\nStep - 2\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 0 0 3 1 7 2]\n [2 4 1 7 9 5 0 3 0]\n [7 3 6 1 0 2 0 0 5]\n [9 5 8 0 0 6 7 2 1]\n [5 9 7 0 6 4 2 1 3]\n [3 8 4 2 1 7 0 5 0]\n [6 1 2 3 5 9 0 0 7]]\nPlaces left to be filled : 16\nStep - 3\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 5 0 3 1 7 2]\n [2 4 1 7 9 5 0 3 0]\n [7 3 6 1 8 2 0 0 5]\n [9 5 8 0 3 6 7 2 1]\n [5 9 7 8 6 4 2 1 3]\n [3 8 4 2 1 7 0 5 0]\n [6 1 2 3 5 9 0 0 7]]\nPlaces left to be filled : 12\nStep - 4\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 5 4 3 1 7 2]\n [2 4 1 7 9 5 8 3 0]\n [7 3 6 1 8 2 0 0 5]\n [9 5 8 4 3 6 7 2 1]\n [5 9 7 8 6 4 2 1 3]\n [3 8 4 2 1 7 0 5 0]\n [6 1 2 3 5 9 0 0 7]]\nPlaces left to be filled : 9\nStep - 5\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 5 4 3 1 7 2]\n [2 4 1 7 9 5 8 3 6]\n [7 3 6 1 8 2 0 0 5]\n [9 5 8 4 3 6 7 2 1]\n [5 9 7 8 6 4 2 1 3]\n [3 8 4 2 1 7 0 5 0]\n [6 1 2 3 5 9 0 8 7]]\nPlaces left to be filled : 7\nStep - 6\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 5 4 3 1 7 2]\n [2 4 1 7 9 5 8 3 6]\n [7 3 6 1 8 2 0 0 5]\n [9 5 8 4 3 6 7 2 1]\n [5 9 7 8 6 4 2 1 3]\n [3 8 4 2 1 7 6 5 0]\n [6 1 2 3 5 9 4 8 7]]\nPlaces left to be filled : 5\nStep - 7\n[[4 2 5 9 7 1 3 6 8]\n [1 7 3 6 2 8 5 0 0]\n [8 6 9 5 4 3 1 7 2]\n [2 4 1 7 9 5 8 3 6]\n [7 3 6 1 8 2 0 0 5]\n [9 5 8 4 3 6 7 2 1]\n [5 9 7 8 6 4 2 1 3]\n [3 8 4 2 1 7 6 5 0]\n [6 1 2 3 5 9 4 8 7]]\nBoard repeated. Partial solution acheived.\nNeed backtracking solution.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python 문법 연습 심화(토이 프로그램)</span>"
    ]
  },
  {
    "objectID": "ds-camp08.html",
    "href": "ds-camp08.html",
    "title": "9  Page Ranker 예제",
    "section": "",
    "text": "9.1 Pure Python을 활용한 Page Ranker 알고리즘 구현\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\nmyWeb = nx.DiGraph()\nmyPages = range(1, 5)\nconnections = [(1, 3), (2, 1), (2, 3), (3, 1), (3, 2), (3, 4), (4, 5), (5, 1), (5, 4)]\nmyWeb.add_nodes_from(myPages)\nmyWeb.add_edges_from(connections)\npos = nx.shell_layout(myWeb)\nnx.draw(myWeb, pos, arrows=True, with_labels=True)\nplt.show()\ndef createPageRank(aGraph):\n    nodes_set = len(aGraph)\n    M = nx.to_numpy_array(aGraph)\n    outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))\n    prob_outwards = np.array([1.0/count if count &gt; 0 else 0.0 for count in outwards])\n    G = np.asarray(np.multiply(M.T, prob_outwards))\n    p = np.ones(nodes_set) / float(nodes_set)\n    if np.min(np.sum(G, axis=0)) &lt; 1.0:\n        print('경고: 전이 확률 합의 최솟값이 1보다 작습니다.')\n    return G, p\nG, p = createPageRank(myWeb)\nprint(G)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Page Ranker 예제</span>"
    ]
  },
  {
    "objectID": "ds-camp08.html#고유값-고유벡터를-활용한-page-ranker-알고리즘-구현",
    "href": "ds-camp08.html#고유값-고유벡터를-활용한-page-ranker-알고리즘-구현",
    "title": "9  Page Ranker 예제",
    "section": "9.2 고유값, 고유벡터를 활용한 Page Ranker 알고리즘 구현",
    "text": "9.2 고유값, 고유벡터를 활용한 Page Ranker 알고리즘 구현\n\n\n\nPage Ranker\n\n\n마이크로 인터넷에 다음과 같이 4개의 페이지 A, B, C, D가 있다고 가정해 보겠습니다.: A↔︎B, A→C, A→D, B↔︎D, C↔︎D * 표기법은 아래와 같음 * ↔︎ 양방향 참조 * → 단방향 참조 * 모든 페이지의 클릭된 확률을 동일\n\n\\((p(A \\rightarrow B) = p(A \\rightarrow C) = p(A \\rightarrow D) = \\frac{1}{3})\\)\n\\((p(B \\rightarrow A) = p(B \\rightarrow D) = \\frac{1}{2})\\)\n\\((p(C \\rightarrow D) = 1)\\)\n\\((p(D \\rightarrow B) = p(D \\rightarrow C) = \\frac{1}{2})\\)\n\n관계를 기반으로 확률 행렬(P)을 만들어 보면 아래와 같음\n\\[\nP = \\begin{bmatrix}\np(A \\rightarrow A) & p(A \\rightarrow B) & p(A \\rightarrow C) & p(A \\rightarrow D) \\\\\np(B \\rightarrow A) & p(B \\rightarrow B) & p(B \\rightarrow C) & p(B \\rightarrow D) \\\\\np(C \\rightarrow A) & p(C \\rightarrow B) & p(C \\rightarrow C) & p(C \\rightarrow D) \\\\\np(D \\rightarrow A) & p(D \\rightarrow B) & p(D \\rightarrow C) & p(D \\rightarrow D)\n\\end{bmatrix}\n\\]\n\\[\nP = \\begin{bmatrix}\n0 & \\frac{1}{3} & \\frac{1}{3} & \\frac{1}{3} \\\\\n\\frac{1}{2} & 0 & 0 & \\frac{1}{2} \\\\\n0 & 0 & 0 & 1 \\\\\n0 & \\frac{1}{2} & \\frac{1}{2} & 0\n\\end{bmatrix}\n\\]\n\nimport numpy as np\n\nP = np.array([\n    [0, 1/3, 1/3, 1/3], \n    [1/2, 0, 0, 1/2], \n    [0, 0, 0, 1], \n    [0, 1/2, 1/2, 0]\n])\nnp.sum(P, axis=1)\n\n\n몇가지 가정과 관찰\n\n특정 시점에 페이지를 방문하는 개인 수가 \\(n\\)명이고 이들은 매분마다 새로운 페이지로 이동\n한 개인이 페이지를 떠날 때마다 다른 개인이 소스 페이지에서 참조된 링크를 클릭하여 같은 페이지로 들감\n장기적으로 가장 많은 링크가 연결된 페이지의 방문자 수가 최대\nPageRank는 프로세스 종료 시점의 총 방문자 수로 웹사이트의 순위를 나타내는 값 \\[r=(rArBrCrD)\\]\n\n\n그런 다음 각 웹사이트의 \\(i + 1\\) 분까지 사용자 수는 \\(i\\) 번째 분의 사용자 수와 관련이 있습니다. \\[r^{(i+1)}=Lr^{(i)} \\text{ where } L = P^T \\\\\n\\text{ Long time behavior of this system is when } r^{(i+1)} = r^{(i)} \\\\\n\\text{ then } Lr = r\n\\]\n\neigen_vals, eigen_vecs = np.linalg.eig(P.T)\norder_eigen_values = np.absolute(eigen_vals).argsort()[::-1]\neigen_vals = eigen_vals[order_eigen_values]\neigen_vecs = eigen_vecs[:, order_eigen_values]\n\n\nr = eigen_vecs[:, 0]\nr\n\n\nvisits = 100 * np.real(r / np.sum(r))\nvisits\n\n\\[r=(rA=12 visitsr, rB=24 visitsr, rC=24visitsr, rD=40visits)\\]",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Page Ranker 예제</span>"
    ]
  },
  {
    "objectID": "ds-camp08.html#응용",
    "href": "ds-camp08.html#응용",
    "title": "9  Page Ranker 예제",
    "section": "9.3 응용",
    "text": "9.3 응용\n\n9.3.1 Concept\n페이지랭크(PageRank) 는 가장 대표적인 graph ranking 알고리즘입니다. PageRank는 월드 와이드 웹과 같은 하이퍼링크 구조를 가지는 문서에 상대적 중요도에 따라 가중치를 부여하는 방법으로, 웹사이트 페이지의 중요도를 측정하기 위해 구글 검색에 쓰이는 알고리즘이다. 이 알고리즘은 서로간에 인용과 참조로 연결된 임의의 묶음에 적용할 수 있다.\n페이지랭크는 스탠퍼드 대학교에 재학 중이던 래리 페이지와 세르게이 브린이 새로운 검색 엔진에 대한 연구 기획의 일부로 개발한 것이다. 이 기획은 1995년 시작되어, 1998년 구글이라 불리는 시범 서비스로 발전하였다. 페이지와 브린은 페이지랭크에 기반한 검색 기술을 바탕으로 구글 사를 설립하였다.\n\n\n9.3.2 Formular\nPageRank 에서 각 node 의 중요도 \\(PR(u)\\) 는 다음처럼 계산됩니다. \\(B_u\\)는 page \\(u\\) 의 backlinks 의 출발점 마디입니다. \\(v\\) 에서 \\(u\\) 로 web page 의 hyperlink 가 있습니다. 각 page \\(v\\) 는 자신의 점수를 자신이 가진 links 의 개수만큼으로 나눠서 각각의 \\(u\\) 에게 전달합니다. \\(u\\) 는 \\(v\\) 로부터 받은 점수의 합에 상수 \\(c\\) 를 곱합니다. 그리로 전체 마디의 개수 \\(N\\) 의 역수인 \\(\\frac{1}{N}\\) 의 \\((1 - c)\\) 배 만큼을 더합니다. \\(c\\) 는 \\([0, 1]\\) 사이의 상수입니다. 논문에서는 0.85 를 이용하였습니다.\n\\[PR(u) = c \\times \\sum_{v \\in B_u} \\frac{PR(v)}{N_v} + (1 - c) \\times \\frac{1}{N}\\]\n\nAcademic citation literature has been applied to the web, largely by counting citations or backlinks to a given page. This gives some approximation of a page’s importance or quality. PageRank extends this idea by not counting links from all pages equally, and by normalizing by the number of links on a page.\n\n\n\n9.3.3 Steady state and Dangling nodes\nCitations 만을 생각하면 아래의 식만으로도 충분합니다. 그러나 그래프가 cyclic 이지 않으면 제대로된 계산을 할 수 없습니다. Cyclic network (graph) 란 한 마디에서 출발하여 다른 마디를 거쳐 다시 출발한 마디로 돌아올 수 있는 길이 있는 네트워크입니다. Web page hyperlinks 에서는 한 page 에서 출발하여 hyperlinks 를 누르다보면 자신의 page 로 돌아올 수 있다는 의미입니다.\n\\[PR(u) = \\sum_{v \\in B_u} \\frac{PR(v)}{N_v}\\]\nPageRank 는 개미의 이동 모델로 설명하기도 합니다. N 개의 마디가 존재하는 graph 에 각 마디마다 공평하게 \\(\\frac{1}{N}\\) 마리의 개미를 올려둡니다. 한 스텝마다 모든 마디의 개미들은 links 를 따라 연결된 다른 마디로 이동합니다. 한 마디의 links 가 두 개 이상이라면 개미들은 공평히 나눠져서 링크를 따라 이동합니다. 이 부분이 위 식의 \\(\\frac{PR(v)}{N_v}\\) 입니다. Backlinks 가 많은 마디에는 많은 개미가 모입니다. 이 과정을 한 번이 아닌 여러 번 수행합니다.\n이러한 과정을 확률 분야에서는 Markov model 이라 합니다. 확률 모형을 이용하여 매 스텝마다 변하는 시스템을 표현합니다. 개미가 이동하는 비율은 Markov model 의 transition matrix 에 해당합니다. 그리고 Markov model 에서는 이런 과정을 여러 번 반복하면 각 마디에 존재하는 개미의 숫자가 변하지 않는 시점 (steady state) 이 생깁니다. 대략 반복횟수 50 번 정도면 충분합니다.\n그러나 어떤 마디는 backlinks 만 있고 다른 마디로 연결되는 links 가 없을 수도 있습니다(dangling node). 이 경우에 개미는 들어오기만 할 뿐 다른 마디로 나가질 못합니다. 이 문제를 해결하기 위해 각 마디에 존재하는 개미의 \\(c=0.85\\), 85% 만큼만 남겨두고 \\((1 - c)\\), 15% 는 임의의 노드로 보냅니다. 모든 마디에서 15% 의 개미가 다른 마디로 나뉘어서 보내지기 때문에 각 마디는 \\(\\frac{1 - c}{N}\\) 의 개미가 새로 유입되는 효과가 있습니다. \\(\\frac{1 - c}{N}\\) 은 dangling nodes 에 의하여 cyclic graph 가 만들어지지 않는 문제를 해결하기 위한 방법입니다. Random jump 를 통하여 모든 마디는 연결이 되며, cyclic network 가 됩니다.\n\ndef _normalize(G):\n    W_sum = {}    \n    for t, f_dict in G.items():\n        for f, w in f_dict.items():\n            W_sum[f] = W_sum.get(f, 0) + w\n    A = {t:{f:w/W_sum[f] for f,w in f_dict.items()} for t, f_dict in G.items()}    \n    nodes = set(G.keys())\n    nodes.update(W_sum)\n    return A, nodes\n\ndef pagerank(G, bias=None, df=0.15, max_iter=50, converge_error=0.001, verbose=0):   \n    A, nodes = _normalize(G)\n    N = len(nodes) # number of nodes\n    sr = 1 - df # survival rate (1 - damping factor)\n    ir = 1 / N # initial rank\n\n    # Initialization\n    rank = {n:ir for n in nodes}\n\n    # Initialization of bias\n    if not bias:\n        bias = {node:ir for node in nodes}\n\n    # Iteration\n    for _iter in range(1, max_iter + 1):\n        rank_new = {}\n\n        # t: to node, f: from node, w: weight\n        for t in nodes:\n            f_dict = A.get(t, {})\n            rank_t = sum((w*rank[f] for f, w in f_dict.items())) if f_dict else 0\n            rank_t = sr * rank_t + df * bias.get(t, 0)\n            rank_new[t] = rank_t\n\n        # convergence check\n        diff = sum((abs(rank[n] - rank_new[n]) for n in nodes))\n        if diff &lt; converge_error:\n            if verbose:\n                print('Early stopped at iter = {}'.format(_iter))\n            break\n\n        if verbose:\n            sum_ = sum(rank_new.values())\n            print('Iteration = {}, diff = {}, sum = {}'.format(_iter, diff, sum_))\n\n        rank = rank_new\n\n    return rank\n\n\nimport pickle\nfrom pprint import pprint \n\nwith open('data/movie-actor/casting_graph.pkl', 'rb') as f:\n    graph = pickle.load(f)\n\n# casting weight of movie = 10001 = 시네마천국\n# pprint(sorted(graph['10001'].items(), key=lambda x:-x[1]))\n\nwith open('data/movie-actor/actors.csv', encoding='utf-8') as f:\n    next(f)\n    docs = [line[:-1].split('\\t') for line in f]\n    _idx2actor = {doc[0]:(doc[2] if doc[2] else doc[1]) for doc in docs}\nidx2actor = lambda idx: _idx2actor.get(idx, 'Unknown')\n# pprint(idx2actor('4374'))\n\n# create idx to movie name function\ndef append_year_countries(year, countries):\n    if year and countries:\n        return f' ({year}, {countries})'\n    elif year:\n        return f' ({year})'\n    elif countries:\n        return f' ({countries})'\n    return ''\n\nwith open('data/movie-actor/movies.csv', encoding='utf-8') as f:\n    next(f)\n    docs = [line[:-1].split('\\t') for line in f]\n    _idx2movie = {doc[0]:'{}{}'.format(doc[1], append_year_countries(doc[4], doc[5])) for doc in docs if len(docs)}\n    _idx2year = {doc[0]:(int(doc[4]) if doc[4] else 0) for doc in docs if len(docs)}\nidx2movie = lambda idx: _idx2movie.get(idx, 'Unknown')\nidx2year = lambda idx: _idx2year.get(idx, 0)\n# pprint(idx2movie('10001'))\n# pprint(idx2year('10001'))\n\nwith open('data/movie-actor/num_comments.txt', encoding='utf-8') as f:\n    docs = [line[:-1].split('\\t') for line in f]\n    _idx2numcomments = {movie_idx:int(num) for movie_idx, num in docs}\nidx2numcomments = lambda idx: _idx2numcomments.get(idx,0)\n# pprint(idx2numcomments('10001'))\n\nprint(idx2movie('134963'), end='\\n\\n')\nfor actor, weight in sorted(graph['134963'].items(), key=lambda x:-x[1]):\n    print(f'{idx2actor(actor)} : {weight}')\n\n# bi-directed graph\n# graph has only one-way link: movie -&gt; actor\nactor_weight_sum = {}\n\n# cumulate actor weights\nfor movie, actors in graph.items():\n    for actor, weight in actors.items():\n        actor_weight_sum[actor] = actor_weight_sum.get(actor, 0) + weight\n\n\n# make bi-directed graph\nfrom collections import defaultdict\ng = defaultdict(lambda: {})\nfor movie, actors in graph.items():\n    g[f'movie {movie}'] = {f'actor {a}':w for a,w in actors.items()}\n    for actor, weight in actors.items():\n        g[f'actor {actor}'][f'movie {movie}'] = weight / actor_weight_sum[actor]\ng = dict(g)\ng['movie 134963']\n\n\nfor movie in g['actor 5751']:\n    movie_idx = movie.split()[1]\n    print(idx2movie(movie_idx))\n\n\nrank = pagerank(g,\n                bias=None,\n                df=0.15,\n                max_iter=50,\n                converge_error=0.0001,\n                verbose=1)\n\n\nmovie_rank = {node:rank for node, rank in rank.items() if node[0] == 'm'}\nactor_rank = {node:rank for node, rank in rank.items() if node[0] == 'a'}\npprint(list(movie_rank)[:10])\npprint(list(actor_rank)[:10])\n\n# top rank movie\n# filtering Korean movie\nkorean_movies = {movie:weight for movie, weight in movie_rank.items() if '한국)' in idx2movie(movie.split()[1])}\nfor movie, _ in sorted(korean_movies.items(), key=lambda x:-x[1])[:100]:\n    movie_idx = movie.split()[1]\n    print(idx2movie(movie_idx))\n\n# english_movies = {movie:weight for movie, weight in movie_rank.items() if '미국)' in idx2movie(movie.split()[1])}\n# for movie, _ in sorted(english_movies.items(), key=lambda x:-x[1])[:100]:\n#     movie_idx = movie.split()[1]\n#     print(idx2movie(movie_idx))\n\n\n# top actor\nfor actor, _ in sorted(actor_rank.items(), key=lambda x:-x[1])[:100]:\n    actor_idx = actor.split()[1]\n    print(idx2actor(actor_idx), end=' ')\n\n\nimport numpy as np\nfrom scipy.sparse import csc_matrix\n\n# node index\nnodes = set(g.keys())\nidx2node = list(sorted(nodes))\nnode2idx = {node:idx for idx, node in enumerate(idx2node)}\n\n# bias\nbias = {node:(idx2numcomments(node.split()[1]) if node[0] == 'm' else 0) for node in g}\n_sum = sum(bias.values())\nbias = {node:b / _sum for node, b in bias.items()}\nbias = np.asarray([b for node, b in sorted(bias.items(), key=lambda tp:node2idx[tp[0]])])\nprint(bias.shape)\n\n# transform g to sparse matrix\nrows = []\ncols = []\ndata = []\n\nfor from_node, to_dict in g.items():\n    from_idx = node2idx[from_node]\n    for to_node, weight in to_dict.items():\n        to_idx = node2idx[to_node]\n        rows.append(from_idx)\n        cols.append(to_idx)\n        data.append(weight)\n\nA = csc_matrix((data, (rows, cols)))\nprint(A.shape)\n\n\nfrom sklearn.preprocessing import normalize\n\nmax_iter = 30\ndf = 0.85\n\nir = 1 / A.shape[0]\nrank = np.asarray([ir] * A.shape[0])\n\nfor n_iter in range(1, max_iter + 1):\n    rank_new = A.dot(rank) # call scipy.sparse safe_sparse_dot()\n    rank_new = normalize(rank_new.reshape(1, -1), norm='l1').reshape(-1)\n    rank_new = df * rank_new + (1 - df) * bias    \n    diff = abs(rank - rank_new).sum()\n    rank = rank_new\n    print(f'iter {n_iter} : diff = {diff}')\n\n\nrank_ = {idx2node[idx]:value for idx, value in enumerate(rank)}\nmovierank = {node:value for node, value in rank_.items() if 'movie' in node}\nactorrank = {node:value for node, value in rank_.items() if 'actor' in node}\n\nfor movie, value in sorted(movierank.items(), key=lambda x:-x[1])[:50]:\n    movie_idx = movie.split()[1]\n    print(idx2movie(movie_idx))",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Page Ranker 예제</span>"
    ]
  },
  {
    "objectID": "ds-camp09(a).html",
    "href": "ds-camp09(a).html",
    "title": "10  사교육비 증가에 따른 상관관계 파악",
    "section": "",
    "text": "10.1 데이터 불러오기 및 전처리",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>사교육비 증가에 따른 상관관계 파악</span>"
    ]
  },
  {
    "objectID": "ds-camp09(a).html#데이터-불러오기-및-전처리",
    "href": "ds-camp09(a).html#데이터-불러오기-및-전처리",
    "title": "10  사교육비 증가에 따른 상관관계 파악",
    "section": "",
    "text": "10.1.1 18년부터 22년까지 총 5년간의 시도별 데이터를 불러와서 전처리 후 병합\n\n\n10.1.2 Try1. 데이터 관찰 및 처리 방법 결정\nlocal = \"서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주\"\ntarget = local.split(\" \")\ndf2 = pd.DataFrame()\n\nfor j in target:\n    df = pd.read_excel(f\"data/local/{j}_2018.xlsx\")\n    df1 = pd.DataFrame(df.loc[8])\n    df1.drop([\"Unnamed: 1\",\"Unnamed: 4\"], axis=0, inplace=True)\n    df1.rename(index={\"Middle School\": \"Unnamed: 11\"}, inplace=True)\n    df1.reset_index(inplace = True)\n    df1.drop([\"index\"], axis=1, inplace=True)\n\n    for i in df1.index:\n        if i % 2 == 1:\n            df1.loc[i]\n        else:\n            df1.drop([i],axis=0,inplace=True)\n\n    df1.index = [\"졸업자\", \"진학자\", \"일반고\", \"특성화고\", \"특목고\", \"자율고\", \"기타\", \"취업자\", \"무직자및미상\"]\n\n    df1 = df1.T\n    \n    df2 = pd.concat([df2, df1])\n\ndf2.index = target\n\ndf2[\"year\"] = 2018\n\ndf18 = df2.copy()\n\n\n10.1.3 Try2. 함수를 사용해서 일괄적으로 처리\n\nlocal = \"서울 부산 대구 인천 광주 대전 울산 세종 경기 강원 충북 충남 전북 전남 경북 경남 제주\".split(\" \")\n\n\ndef merge_df(year, targets):\n    df = pd.DataFrame()\n    df_index = [\"졸업자\", \"진학자\", \"일반고\", \"특성화고\", \"특목고\", \"자율고\", \"기타\", \"취업자\", \"무직자및미상\"]\n    for year in range(2018, year+1):\n        for target in targets: \n            _raw = pd.read_excel(f\"data/local/{target}_{year}.xlsx\")\n            _merge_df = pd.DataFrame(_raw.loc[8])\n            _merge_df.drop([\"Unnamed: 1\",\"Unnamed: 4\"], axis=0, inplace=True)\n            _merge_df.rename(index={\"Middle School\": \"Unnamed: 11\"}, inplace=True)\n            _merge_df.reset_index(inplace = True)\n            _merge_df.drop([\"index\"], axis=1, inplace=True)\n\n            for i in _merge_df.index:\n                if i % 2 == 1:\n                    _merge_df.loc[i]\n                else:\n                    _merge_df.drop([i],axis=0,inplace=True)\n\n            _merge_df.index = df_index\n            _merge_df = _merge_df.T\n            _merge_df[\"년도\"] = year\n            _merge_df[\"지역\"] = target\n            df = pd.concat([df, _merge_df])\n    df = df.reset_index(drop=True)\n    df = df[[\"년도\", \"지역\", \"졸업자\", \"진학자\", \"일반고\", \"특성화고\", \"특목고\", \"자율고\", \"기타\", \"취업자\", \"무직자및미상\"]]\n    return df\n\n\ndf = merge_df(2022, local)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n\n\n\n\n85 rows × 11 columns\n\n\n\n\n\n\n10.1.4 시도별 중학생 1인당 월평균 사교육비 컬럼 추가\n\nmoney = pd.read_csv(\"data/money.csv\",encoding = \"cp949\")\nmoney = money.drop([0,1], axis = 0)\nmoney = money.iloc[:,6:]\nmoney.index = local\nmoney = money.iloc[:,4:].reset_index(drop=False)\nmoney = money.rename(columns = {\"index\":\"지역\"})\n\nmoney = pd.concat([money[[\"지역\",\"2018\"]].rename(columns = {\"2018\":\"사교육비\"}),\n                 money[[\"지역\",\"2019\"]].rename(columns = {\"2019\":\"사교육비\"}),\n                 money[[\"지역\",\"2020\"]].rename(columns = {\"2020\":\"사교육비\"}),\n                 money[[\"지역\",\"2021\"]].rename(columns = {\"2021\":\"사교육비\"}),\n                 money[[\"지역\",\"2022\"]].rename(columns = {\"2022\":\"사교육비\"})]).reset_index(drop=True)\nmoney\n\nmoney = money.melt(id_vars = \"지역\", var_name = \"년도\", value_name = \"사교육비\")\nmoney = money.drop(\"년도\", axis=1)\nmoney[\"사교육비\"] = money[\"사교육비\"].astype(float)\nmoney\n\n\n\n\n\n\n\n\n\n지역\n사교육비\n\n\n\n\n0\n서울\n41.5\n\n\n1\n부산\n31.6\n\n\n2\n대구\n33.2\n\n\n3\n인천\n30.0\n\n\n4\n광주\n31.0\n\n\n...\n...\n...\n\n\n80\n전북\n30.3\n\n\n81\n전남\n30.8\n\n\n82\n경북\n32.4\n\n\n83\n경남\n35.4\n\n\n84\n제주\n36.4\n\n\n\n\n85 rows × 2 columns\n\n\n\n\n\ndf = pd.concat([df,money[\"사교육비\"]],axis=1)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n\n\n\n\n85 rows × 12 columns\n\n\n\n\n\n\n10.1.5 시도별 중학생 음주율 컬럼 추가\ndrink = pd.concat([drink[[\"응답자특성별(2)\",\"2018\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2018\":\"음주율\"}),\n                   drink[[\"응답자특성별(2)\",\"2019\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2019\":\"음주율\"}),\n                   drink[[\"응답자특성별(2)\",\"2020\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2020\":\"음주율\"}),\n                   drink[[\"응답자특성별(2)\",\"2021\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2021\":\"음주율\"}),\n                   drink[[\"응답자특성별(2)\",\"2022\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2022\":\"음주율\"})]).reset_index(drop=True)\ndrink\n\ndrink = pd.read_csv(\"data/drink.csv\",encoding=\"cp949\").drop([0,1])\ndrink = drink.drop(\"응답자특성별(1)\",axis=1)\ndrink = drink.melt(id_vars = \"응답자특성별(2)\", var_name = \"년도\", value_name = \"음주율\")\ndrink[\"음주율\"] = drink[\"음주율\"].astype(float)\n\n\ndf = pd.concat([df, drink[\"음주율\"]], axis=1)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n음주율\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n15.4\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n15.9\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n14.3\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n15.4\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n17.8\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n14.9\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n13.5\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n16.5\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n14.4\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n9.9\n\n\n\n\n85 rows × 13 columns\n\n\n\n\n\n\n10.1.6 시도별 중학생 우울감 경험률 컬럼 추가\nsad = pd.concat([sad[[\"응답자특성별(2)\",\"2018\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2018\":\"우울감경험률\"}),\n                 sad[[\"응답자특성별(2)\",\"2019\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2019\":\"우울감경험률\"}),\n                 sad[[\"응답자특성별(2)\",\"2020\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2020\":\"우울감경험률\"}),\n                 sad[[\"응답자특성별(2)\",\"2021\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2021\":\"우울감경험률\"}),\n                 sad[[\"응답자특성별(2)\",\"2022\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2022\":\"우울감경험률\"})]).reset_index(drop=True)\n\nsad = pd.read_csv(\"data/sad.csv\",encoding=\"cp949\").drop([0,1])\nsad = sad.drop(\"응답자특성별(1)\",axis=1)\nsad = sad.melt(id_vars = \"응답자특성별(2)\", var_name = \"년도\", value_name = \"우울감경험률\")\nsad[\"우울감경험률\"] = sad[\"우울감경험률\"].astype(float)\nsad\n\n\n\n\n\n\n\n\n\n응답자특성별(2)\n년도\n우울감경험률\n\n\n\n\n0\n서울\n2018\n29.6\n\n\n1\n부산\n2018\n24.2\n\n\n2\n대구\n2018\n23.1\n\n\n3\n인천\n2018\n25.4\n\n\n4\n광주\n2018\n28.3\n\n\n...\n...\n...\n...\n\n\n80\n전북\n2022\n29.5\n\n\n81\n전남\n2022\n26.2\n\n\n82\n경북\n2022\n26.7\n\n\n83\n경남\n2022\n27.9\n\n\n84\n제주\n2022\n25.8\n\n\n\n\n85 rows × 3 columns\n\n\n\n\n\ndf = pd.concat([df, sad[\"우울감경험률\"]], axis=1)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n음주율\n우울감경험률\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n15.4\n29.6\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n15.9\n24.2\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n14.3\n23.1\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n15.4\n25.4\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n17.8\n28.3\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n14.9\n29.5\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n13.5\n26.2\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n16.5\n26.7\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n14.4\n27.9\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n9.9\n25.8\n\n\n\n\n85 rows × 14 columns\n\n\n\n\n\n\n10.1.7 시도별 중학생 흡연율 컬럼 추가\nsmoke = pd.concat([smoke[[\"응답자특성별(2)\",\"2018\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2018\":\"흡연율\"}),\n                   smoke[[\"응답자특성별(2)\",\"2019\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2019\":\"흡연율\"}),\n                   smoke[[\"응답자특성별(2)\",\"2020\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2020\":\"흡연율\"}),\n                   smoke[[\"응답자특성별(2)\",\"2021\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2021\":\"흡연율\"}),\n                   smoke[[\"응답자특성별(2)\",\"2022\"]].rename(columns={\"응답자특성별(2)\":\"지역\",\"2022\":\"흡연율\"})]).reset_index(drop=True)\n\nsmoke = pd.read_csv(\"data/smoke.csv\",encoding=\"cp949\").drop([0,1])\nsmoke = smoke.drop(\"응답자특성별(1)\",axis=1)\nsmoke = smoke.melt(id_vars = \"응답자특성별(2)\", var_name = \"년도\", value_name = \"흡연율\")\nsmoke[\"흡연율\"] = smoke[\"흡연율\"].astype(float) \nsmoke\n\n\n\n\n\n\n\n\n\n응답자특성별(2)\n년도\n흡연율\n\n\n\n\n0\n서울\n2018\n5.7\n\n\n1\n부산\n2018\n5.8\n\n\n2\n대구\n2018\n6.8\n\n\n3\n인천\n2018\n6.8\n\n\n4\n광주\n2018\n8.4\n\n\n...\n...\n...\n...\n\n\n80\n전북\n2022\n6.3\n\n\n81\n전남\n2022\n6.3\n\n\n82\n경북\n2022\n5.4\n\n\n83\n경남\n2022\n4.8\n\n\n84\n제주\n2022\n4.1\n\n\n\n\n85 rows × 3 columns\n\n\n\n\n\ndf = pd.concat([df,smoke[\"흡연율\"]], axis=1)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n음주율\n우울감경험률\n흡연율\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n15.4\n29.6\n5.7\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n15.9\n24.2\n5.8\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n14.3\n23.1\n6.8\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n15.4\n25.4\n6.8\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n17.8\n28.3\n8.4\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n14.9\n29.5\n6.3\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n13.5\n26.2\n6.3\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n16.5\n26.7\n5.4\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n14.4\n27.9\n4.8\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n9.9\n25.8\n4.1\n\n\n\n\n85 rows × 15 columns\n\n\n\n\n\n\n10.1.8 시도별 중학생 비만율 컬럼 추가\nfat = pd.concat([fat[[\"응답자특성별(2)\",\"2018\"]].rename(columns = {\"응답자특성별(2)\":\"지역\",\"2018\":\"비만율\"}),\n                 fat[[\"응답자특성별(2)\",\"2019\"]].rename(columns = {\"응답자특성별(2)\":\"지역\",\"2019\":\"비만율\"}),\n                 fat[[\"응답자특성별(2)\",\"2020\"]].rename(columns = {\"응답자특성별(2)\":\"지역\",\"2020\":\"비만율\"}),\n                 fat[[\"응답자특성별(2)\",\"2021\"]].rename(columns = {\"응답자특성별(2)\":\"지역\",\"2021\":\"비만율\"}),\n                 fat[[\"응답자특성별(2)\",\"2022\"]].rename(columns = {\"응답자특성별(2)\":\"지역\",\"2022\":\"비만율\"})]).reset_index(drop=True)\n\nfat = pd.read_csv(\"data/fat.csv\",encoding=\"cp949\").drop([0,1])\nfat = fat.drop(\"응답자특성별(1)\",axis=1)\nfat = fat.melt(id_vars = \"응답자특성별(2)\", var_name = \"년도\", value_name = \"비만율\")\nfat[\"비만율\"] = fat[\"비만율\"].astype(float)\nfat\n\n\n\n\n\n\n\n\n\n응답자특성별(2)\n년도\n비만율\n\n\n\n\n0\n서울\n2018\n10.1\n\n\n1\n부산\n2018\n11.9\n\n\n2\n대구\n2018\n11.2\n\n\n3\n인천\n2018\n11.2\n\n\n4\n광주\n2018\n9.8\n\n\n...\n...\n...\n...\n\n\n80\n전북\n2022\n13.2\n\n\n81\n전남\n2022\n12.2\n\n\n82\n경북\n2022\n14.5\n\n\n83\n경남\n2022\n13.3\n\n\n84\n제주\n2022\n16.7\n\n\n\n\n85 rows × 3 columns\n\n\n\n\n\ndf = pd.concat([df,fat[\"비만율\"]],axis=1)\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n음주율\n우울감경험률\n흡연율\n비만율\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n15.4\n29.6\n5.7\n10.1\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n15.9\n24.2\n5.8\n11.9\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n14.3\n23.1\n6.8\n11.2\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n15.4\n25.4\n6.8\n11.2\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n17.8\n28.3\n8.4\n9.8\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n14.9\n29.5\n6.3\n13.2\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n13.5\n26.2\n6.3\n12.2\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n16.5\n26.7\n5.4\n14.5\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n14.4\n27.9\n4.8\n13.3\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n9.9\n25.8\n4.1\n16.7\n\n\n\n\n85 rows × 16 columns\n\n\n\n\n\ndf\n\n\n\n\n\n\n\n\n\n년도\n지역\n졸업자\n진학자\n일반고\n특성화고\n특목고\n자율고\n기타\n취업자\n무직자및미상\n사교육비\n음주율\n우울감경험률\n흡연율\n비만율\n\n\n\n\n0\n2018\n서울\n75301\n75150\n48352\n12663\n3267\n10383\n485\n2\n149\n41.5\n15.4\n29.6\n5.7\n10.1\n\n\n1\n2018\n부산\n26926\n26835\n17566\n5734\n2101\n1110\n324\n3\n88\n31.6\n15.9\n24.2\n5.8\n11.9\n\n\n2\n2018\n대구\n22753\n22644\n13993\n4135\n1224\n3176\n116\n1\n108\n33.2\n14.3\n23.1\n6.8\n11.2\n\n\n3\n2018\n인천\n25956\n25868\n17718\n5704\n1288\n711\n447\n-\n88\n30.0\n15.4\n25.4\n6.8\n11.2\n\n\n4\n2018\n광주\n16074\n16039\n12143\n2768\n612\n403\n113\n2\n33\n31.0\n17.8\n28.3\n8.4\n9.8\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n80\n2022\n전북\n15673\n15633\n12571\n2144\n770\n86\n62\n-\n40\n30.3\n14.9\n29.5\n6.3\n13.2\n\n\n81\n2022\n전남\n14937\n14898\n10479\n3316\n689\n357\n57\n-\n39\n30.8\n13.5\n26.2\n6.3\n12.2\n\n\n82\n2022\n경북\n20140\n20094\n14612\n3141\n1113\n1174\n54\n-\n46\n32.4\n16.5\n26.7\n5.4\n14.5\n\n\n83\n2022\n경남\n29440\n29369\n23356\n3600\n1173\n891\n349\n-\n71\n35.4\n14.4\n27.9\n4.8\n13.3\n\n\n84\n2022\n제주\n6392\n6357\n5000\n1107\n193\n10\n47\n-\n35\n36.4\n9.9\n25.8\n4.1\n16.7\n\n\n\n\n85 rows × 16 columns",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>사교육비 증가에 따른 상관관계 파악</span>"
    ]
  },
  {
    "objectID": "ds-camp09(a).html#그래프를-통한-확인",
    "href": "ds-camp09(a).html#그래프를-통한-확인",
    "title": "10  사교육비 증가에 따른 상관관계 파악",
    "section": "10.2 그래프를 통한 확인",
    "text": "10.2 그래프를 통한 확인\n\ndf.plot.bar(x=\"년도\", y=\"사교육비\", title=\"년도별 사교육비 변화\")\n\n\n\n\n\n\n\n\n\n%config InlineBackend.figure_format = \"retina\"\ndf.plot(x=\"년도\", y=\"사교육비\", kind=\"line\", title=\"년도별 사교육비 변화\", figsize=(15,10))\ndf.plot(x=\"년도\", y=\"사교육비\", kind=\"bar\", title=\"년도별 사교육비 변화\", figsize=(15,10))\ndf.plot(x=\"년도\", y=\"사교육비\", kind=\"scatter\", title=\"년도별 사교육비 변화\", figsize=(15,10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport seaborn as sns\nsns.pairplot(df, hue=\"지역\")\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(15,10))\nsns.heatmap(df.corr(numeric_only=True),\n            cbar=True,\n            annot=True, \n            square=True,\n            fmt=\".2f\",\n            annot_kws={\"size\": 15})\n\n\n\n\n\n\n\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\ndf.columns\n\nIndex(['년도', '지역', '졸업자', '진학자', '일반고', '특성화고', '특목고', '자율고', '기타', '취업자',\n       '무직자및미상', '사교육비', '음주율', '우울감경험률', '흡연율', '비만율'],\n      dtype='object')\n\n\n\nplt.figure(figsize=(15,10))\npx.bar(df, x=\"년도\", y=\"사교육비\", color=\"지역\", barmode=\"group\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n&lt;Figure size 1500x1000 with 0 Axes&gt;",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>사교육비 증가에 따른 상관관계 파악</span>"
    ]
  },
  {
    "objectID": "ds-camp09(a).html#데이터-형태로-변경",
    "href": "ds-camp09(a).html#데이터-형태로-변경",
    "title": "10  사교육비 증가에 따른 상관관계 파악",
    "section": "10.3 데이터 형태로 변경",
    "text": "10.3 데이터 형태로 변경\n\ndf_data = pd.DataFrame()\ncolumns = [\"특성화고진학률\",\"특목고진학률\",\"자율고진학율\",\"특+자 진학률\",\"사교육비\",\"음주율\",\"우울감경험률\",\"흡연율\",\"비만율\"]\nvalues = [\"특성화고\",\"특목고\",\"자율고\"]\ni = 0\nfor i in df.index:\n    for j in range(0, 9):\n        k = i*9 + j\n        df_data.loc[k,\"지역\"] = df.loc[i,\"지역\"]\n        df_data.loc[k,\"특성\"] = f\"{columns[j]}\"\n        df_data.loc[k,\"년도\"] = str(df.loc[i,\"년도\"])\n        if j &lt;= 2:\n            df_data.loc[k,\"값\"] = df.loc[i,f\"{values[j]}\"]/df.loc[i,\"졸업자\"]\n        elif j == 3:\n            df_data.loc[k,\"값\"] = (df.loc[i,f\"{values[j-2]}\"] + df.loc[i,f\"{values[j-1]}\"])/df.loc[i,\"졸업자\"]\n        elif j == 4:\n            df_data.loc[k,\"값\"] = df.loc[i,\"사교육비\"]\n        elif j == 5:\n            df_data.loc[k,\"값\"] = df.loc[i,\"음주율\"]\n        elif j == 6:\n            df_data.loc[k,\"값\"] = df.loc[i,\"우울감경험률\"]\n        elif j == 7:\n            df_data.loc[k,\"값\"] = df.loc[i,\"흡연율\"]\n        elif j == 8:\n            df_data.loc[k,\"값\"] = df.loc[i,\"비만율\"]\n    i += 1\ndf_data[\"년도\"] = df_data[\"년도\"].apply(lambda x: int(x)) \ndf_data[\"값\"] = df_data[\"값\"].astype(\"float\")\ndf_data\n\n\n\n\n\n\n\n\n\n지역\n특성\n년도\n값\n\n\n\n\n0\n서울\n특성화고진학률\n2018\n0.168165\n\n\n1\n서울\n특목고진학률\n2018\n0.043386\n\n\n2\n서울\n자율고진학율\n2018\n0.137887\n\n\n3\n서울\n특+자 진학률\n2018\n0.181272\n\n\n4\n서울\n사교육비\n2018\n41.500000\n\n\n...\n...\n...\n...\n...\n\n\n760\n제주\n사교육비\n2022\n36.400000\n\n\n761\n제주\n음주율\n2022\n9.900000\n\n\n762\n제주\n우울감경험률\n2022\n25.800000\n\n\n763\n제주\n흡연율\n2022\n4.100000\n\n\n764\n제주\n비만율\n2022\n16.700000\n\n\n\n\n765 rows × 4 columns",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>사교육비 증가에 따른 상관관계 파악</span>"
    ]
  },
  {
    "objectID": "ds-camp09(a).html#상관관계-분석을-하기-위한-정규성-검정",
    "href": "ds-camp09(a).html#상관관계-분석을-하기-위한-정규성-검정",
    "title": "10  사교육비 증가에 따른 상관관계 파악",
    "section": "10.4 상관관계 분석을 하기 위한 정규성 검정",
    "text": "10.4 상관관계 분석을 하기 위한 정규성 검정\n\n가설 : 데이터가 정규성을 만족한다.\n\n\nfor feat in df_data[\"특성\"].unique():\n    print(f\"{feat} : {stats.shapiro(df_data[df_data['특성'] == feat]['값'])[1]}\")\n\n특성화고진학률 : 0.03166119105713885\n특목고진학률 : 0.006314045970690213\n자율고진학율 : 7.290498601234899e-09\n특+자 진학률 : 1.7305325412308696e-05\n사교육비 : 0.0028869564270666372\n음주율 : 0.08020648612033501\n우울감경험률 : 0.47319430354752207\n흡연율 : 0.14145183842071535\n비만율 : 0.14380675256536207\n\n\n\n총 9개 중 5개의 데이터에 있어서 p-value가 유의수준 0.05보다 작기 때문에 귀무가설을 기각하고 대립가설을 채택해서 데이터가 정규성을 만족하지 못한다고 주장할 수 있다.\n데이터가 정규성을 만족하지 못하기 때문에 spearman 상관분석으로 상관관계 분석을 진행했다.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>사교육비 증가에 따른 상관관계 파악</span>"
    ]
  },
  {
    "objectID": "ds-camp09(b).html",
    "href": "ds-camp09(b).html",
    "title": "11  # 선수 순위 표 크롤링",
    "section": "",
    "text": "11.1 경기별 기록 EDA\n최형우_경기별기록 = pd.read_csv('data/72443경기별기록.csv')\n최형우_경기별기록\n\n\n\n\n\n\n\n\n\n구분\nG\nAVG\nPA\nAB\nR\nH\n2B\n3B\nHR\nRBI\nSB\nCS\nBB\nHBP\nSO\nGDP\n\n\n\n\n0\nKT\n12\n0.333\n48\n39\n6\n13\n2\n0\n2\n7\n0\n0\n7\n1\n9\n0\n\n\n1\nLG\n15\n0.280\n63\n50\n7\n14\n0\n0\n3\n10\n0\n0\n10\n2\n7\n0\n\n\n2\nNC\n10\n0.324\n41\n37\n7\n12\n4\n0\n3\n10\n0\n0\n4\n0\n9\n0\n\n\n3\nSSG\n13\n0.244\n56\n45\n8\n11\n3\n0\n3\n9\n0\n0\n11\n0\n13\n0\n\n\n4\n두산\n15\n0.333\n64\n57\n5\n19\n7\n0\n2\n9\n0\n0\n6\n1\n9\n1\n\n\n5\n롯데\n14\n0.404\n59\n52\n8\n21\n5\n0\n0\n12\n0\n0\n7\n0\n10\n1\n\n\n6\n삼성\n14\n0.264\n62\n53\n10\n14\n1\n0\n2\n12\n0\n0\n7\n1\n9\n1\n\n\n7\n키움\n13\n0.205\n50\n44\n2\n9\n0\n0\n0\n1\n0\n0\n4\n1\n8\n2\n\n\n8\n한화\n15\n0.315\n65\n54\n11\n17\n5\n1\n2\n11\n0\n0\n9\n2\n9\n0\n\n\n9\n고척\n5\n0.200\n21\n20\n0\n4\n0\n0\n0\n0\n0\n0\n1\n0\n5\n1\n\n\n10\n광주\n63\n0.288\n254\n212\n34\n61\n13\n0\n11\n42\n0\n0\n34\n5\n45\n2\n\n\n11\n대구\n6\n0.286\n26\n21\n4\n6\n0\n0\n0\n1\n0\n0\n5\n0\n2\n0\n\n\n12\n대전\n7\n0.375\n30\n24\n4\n9\n4\n1\n1\n5\n0\n0\n5\n1\n4\n0\n\n\n13\n문학\n7\n0.280\n30\n25\n5\n7\n2\n0\n2\n7\n0\n0\n5\n0\n5\n0\n\n\n14\n사직\n8\n0.419\n36\n31\n5\n13\n3\n0\n0\n6\n0\n0\n5\n0\n6\n1\n\n\n15\n수원\n5\n0.421\n21\n19\n4\n8\n1\n0\n1\n4\n0\n0\n2\n0\n4\n0\n\n\n16\n잠실\n14\n0.327\n63\n55\n5\n18\n4\n0\n1\n8\n0\n0\n6\n2\n7\n0\n\n\n17\n창원\n3\n0.100\n12\n10\n1\n1\n0\n0\n1\n3\n0\n0\n2\n0\n2\n0\n\n\n18\n포항\n3\n0.214\n15\n14\n2\n3\n0\n0\n0\n5\n0\n0\n0\n0\n3\n1\n\n\n19\n3~4월\n22\n0.316\n89\n76\n11\n24\n5\n0\n3\n12\n0\n0\n12\n1\n14\n2\n\n\n20\n5월\n21\n0.324\n91\n74\n11\n24\n5\n1\n2\n15\n0\n0\n14\n2\n13\n0\n\n\n21\n6월\n23\n0.262\n96\n84\n10\n22\n4\n0\n4\n14\n0\n0\n11\n1\n22\n0\n\n\n22\n7월\n16\n0.255\n67\n55\n11\n14\n2\n0\n3\n10\n0\n0\n10\n2\n14\n0\n\n\n23\n8월\n20\n0.325\n89\n77\n14\n25\n3\n0\n3\n20\n0\n0\n8\n2\n11\n3\n\n\n24\n9월이상\n19\n0.323\n76\n65\n7\n21\n8\n0\n2\n10\n0\n0\n10\n0\n9\n0\n\n\n25\n월\n1\n0.200\n5\n5\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n26\n화\n18\n0.292\n78\n65\n12\n19\n5\n1\n4\n11\n0\n0\n11\n2\n12\n0\n\n\n27\n수\n20\n0.292\n80\n65\n11\n19\n5\n0\n3\n13\n0\n0\n12\n2\n12\n1\n\n\n28\n목\n17\n0.246\n73\n61\n8\n15\n3\n0\n2\n10\n0\n0\n11\n0\n17\n1\n\n\n29\n금\n22\n0.342\n90\n79\n11\n27\n4\n0\n4\n15\n0\n0\n9\n1\n16\n1\n\n\n30\n토\n22\n0.342\n95\n79\n12\n27\n5\n0\n2\n18\n0\n0\n13\n2\n12\n0\n\n\n31\n일\n21\n0.286\n87\n77\n10\n22\n4\n0\n2\n14\n0\n0\n9\n1\n14\n2\n\n\n32\n홈\n63\n0.288\n254\n212\n34\n61\n13\n0\n11\n42\n0\n0\n34\n5\n45\n2\n\n\n33\n방문\n58\n0.315\n254\n219\n30\n69\n14\n1\n6\n39\n0\n0\n31\n3\n38\n3\n\n\n34\n주간\n17\n0.259\n68\n58\n6\n15\n2\n0\n2\n11\n0\n0\n9\n0\n12\n2\n\n\n35\n야간\n104\n0.308\n440\n373\n58\n115\n25\n1\n15\n70\n0\n0\n56\n8\n71\n3\n\n\n36\n전반기\n75\n0.294\n315\n265\n40\n78\n15\n1\n11\n46\n0\n0\n43\n6\n57\n2\n\n\n37\n후반기\n46\n0.313\n193\n166\n24\n52\n12\n0\n6\n35\n0\n0\n22\n2\n26\n3",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>경기별 기록 EDA</span>"
    ]
  },
  {
    "objectID": "ds-camp09(b).html#경기별-기록-eda",
    "href": "ds-camp09(b).html#경기별-기록-eda",
    "title": "11  # 선수 순위 표 크롤링",
    "section": "",
    "text": "11.1.1 상대팀별 기록\n\n최형우_경기별기록_상대팀별 = 최형우_경기별기록[:9]\n최형우_경기별기록_상대팀별\n\n\n\n\n\n\n\n\n\n구분\nG\nAVG\nPA\nAB\nR\nH\n2B\n3B\nHR\nRBI\nSB\nCS\nBB\nHBP\nSO\nGDP\n\n\n\n\n0\nKT\n12\n0.333\n48\n39\n6\n13\n2\n0\n2\n7\n0\n0\n7\n1\n9\n0\n\n\n1\nLG\n15\n0.280\n63\n50\n7\n14\n0\n0\n3\n10\n0\n0\n10\n2\n7\n0\n\n\n2\nNC\n10\n0.324\n41\n37\n7\n12\n4\n0\n3\n10\n0\n0\n4\n0\n9\n0\n\n\n3\nSSG\n13\n0.244\n56\n45\n8\n11\n3\n0\n3\n9\n0\n0\n11\n0\n13\n0\n\n\n4\n두산\n15\n0.333\n64\n57\n5\n19\n7\n0\n2\n9\n0\n0\n6\n1\n9\n1\n\n\n5\n롯데\n14\n0.404\n59\n52\n8\n21\n5\n0\n0\n12\n0\n0\n7\n0\n10\n1\n\n\n6\n삼성\n14\n0.264\n62\n53\n10\n14\n1\n0\n2\n12\n0\n0\n7\n1\n9\n1\n\n\n7\n키움\n13\n0.205\n50\n44\n2\n9\n0\n0\n0\n1\n0\n0\n4\n1\n8\n2\n\n\n8\n한화\n15\n0.315\n65\n54\n11\n17\n5\n1\n2\n11\n0\n0\n9\n2\n9\n0\n\n\n\n\n\n\n\n\n\n# 정보근 상대 팀 별 타율 및 홈런 갯수 시각화\nfig = px.bar(최형우_경기별기록_상대팀별, \n             y=최형우_경기별기록_상대팀별['구분'], \n             x=최형우_경기별기록_상대팀별['AVG'], \n             text='AVG', \n             title='Batting Average by 상대 팀',\n             labels={'타율': '타율'})\nfig.update_traces(texttemplate='%{text:.3f}', textposition='outside')\nfig.show()\n\nfig = px.bar(최형우_경기별기록_상대팀별, \n             x=최형우_경기별기록_상대팀별['구분'], \n             y=최형우_경기별기록_상대팀별['HR'], \n             text='HR', \n             title='Home Runs by 상대 팀',\n             labels={'홈런': '홈런'})\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n11.1.2 구장별 기록\n\n최형우_경기별기록_구장별 = 최형우_경기별기록[9:18]\n최형우_경기별기록_구장별\n\n\n\n\n\n\n\n\n\n구분\nG\nAVG\nPA\nAB\nR\nH\n2B\n3B\nHR\nRBI\nSB\nCS\nBB\nHBP\nSO\nGDP\n\n\n\n\n9\n고척\n5\n0.200\n21\n20\n0\n4\n0\n0\n0\n0\n0\n0\n1\n0\n5\n1\n\n\n10\n광주\n63\n0.288\n254\n212\n34\n61\n13\n0\n11\n42\n0\n0\n34\n5\n45\n2\n\n\n11\n대구\n6\n0.286\n26\n21\n4\n6\n0\n0\n0\n1\n0\n0\n5\n0\n2\n0\n\n\n12\n대전\n7\n0.375\n30\n24\n4\n9\n4\n1\n1\n5\n0\n0\n5\n1\n4\n0\n\n\n13\n문학\n7\n0.280\n30\n25\n5\n7\n2\n0\n2\n7\n0\n0\n5\n0\n5\n0\n\n\n14\n사직\n8\n0.419\n36\n31\n5\n13\n3\n0\n0\n6\n0\n0\n5\n0\n6\n1\n\n\n15\n수원\n5\n0.421\n21\n19\n4\n8\n1\n0\n1\n4\n0\n0\n2\n0\n4\n0\n\n\n16\n잠실\n14\n0.327\n63\n55\n5\n18\n4\n0\n1\n8\n0\n0\n6\n2\n7\n0\n\n\n17\n창원\n3\n0.100\n12\n10\n1\n1\n0\n0\n1\n3\n0\n0\n2\n0\n2\n0\n\n\n\n\n\n\n\n\n\n# 최형우 구장별 타율 및 홈런 갯수 시각화\nfig = px.bar(최형우_경기별기록_구장별, \n             y=최형우_경기별기록_구장별['구분'], \n             x=최형우_경기별기록_구장별['AVG'], \n             text='AVG', \n             title='Batting Average by 상대 팀',\n             labels={'타율': '타율'})\nfig.update_traces(texttemplate='%{text:.3f}', textposition='outside')\nfig.show()\n\nfig = px.bar(최형우_경기별기록_구장별, \n             y=최형우_경기별기록_구장별['구분'], \n             x=최형우_경기별기록_구장별['HR'], \n             text='HR', \n             title='Home Runs by 상대 팀',\n             labels={'홈런': '홈런'})\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n11.1.3 월별 기록\n\n최형우_경기별기록_월별 = 최형우_경기별기록[19:24]\n최형우_경기별기록_월별\n\n\n\n\n\n\n\n\n\n구분\nG\nAVG\nPA\nAB\nR\nH\n2B\n3B\nHR\nRBI\nSB\nCS\nBB\nHBP\nSO\nGDP\n\n\n\n\n19\n3~4월\n22\n0.316\n89\n76\n11\n24\n5\n0\n3\n12\n0\n0\n12\n1\n14\n2\n\n\n20\n5월\n21\n0.324\n91\n74\n11\n24\n5\n1\n2\n15\n0\n0\n14\n2\n13\n0\n\n\n21\n6월\n23\n0.262\n96\n84\n10\n22\n4\n0\n4\n14\n0\n0\n11\n1\n22\n0\n\n\n22\n7월\n16\n0.255\n67\n55\n11\n14\n2\n0\n3\n10\n0\n0\n10\n2\n14\n0\n\n\n23\n8월\n20\n0.325\n89\n77\n14\n25\n3\n0\n3\n20\n0\n0\n8\n2\n11\n3\n\n\n\n\n\n\n\n\n\n# 월별 타율 변화와 홈런의 갯수 변화 확인\nfig = px.line(최형우_경기별기록_월별, \n              x=최형우_경기별기록_월별['구분'], \n              y=최형우_경기별기록_월별['AVG'],               \n              title='월별 타율 변화',\n              labels={'타율': '타율'})\nfig.update_traces(mode='markers+lines')\nfig.show()\n\nfig = px.line(최형우_경기별기록_월별, \n              x=최형우_경기별기록_월별['구분'], \n              y=최형우_경기별기록_월별['HR'], \n              title='월별 홈런 갯수 변화',\n              labels={'홈런': '홈런'})\nfig.update_traces(mode='markers+lines', line_color='red')\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# 월별 삼진과 볼넷 변화와 홈런의 갯수 변화 확인\nfig = px.line(최형우_경기별기록_월별, \n              x=최형우_경기별기록_월별['구분'], \n              y=최형우_경기별기록_월별['SO'], \n              title='월별 삼진 갯수 변화',\n              labels={'삼진': '삼진'})\nfig.update_traces(mode='markers+lines', line_color='red')\nfig.show()\n\nfig = px.line(최형우_경기별기록_월별, \n              x=최형우_경기별기록_월별['구분'], \n              y=최형우_경기별기록_월별['BB'], \n              title='월별 볼넷 수 변화',\n              labels={'볼넷': '볼넷'})\nfig.update_traces(mode='markers+lines', line_color='blue')\nfig.show()\n\nfig = px.line(최형우_경기별기록_월별, \n              x=최형우_경기별기록_월별['구분'], \n              y=최형우_경기별기록_월별['HR'], \n              title='월별 홈런 수 변화',\n              labels={'홈런': '홈런'})\nfig.update_traces(mode='markers+lines', line_color='green')\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n11.1.4 요일별 기록\n\n최형우_경기별기록_요일별 = 최형우_경기별기록[25:31]\n최형우_경기별기록_요일별\n\n\n\n\n\n\n\n\n\n구분\nG\nAVG\nPA\nAB\nR\nH\n2B\n3B\nHR\nRBI\nSB\nCS\nBB\nHBP\nSO\nGDP\n\n\n\n\n25\n월\n1\n0.200\n5\n5\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n26\n화\n18\n0.292\n78\n65\n12\n19\n5\n1\n4\n11\n0\n0\n11\n2\n12\n0\n\n\n27\n수\n20\n0.292\n80\n65\n11\n19\n5\n0\n3\n13\n0\n0\n12\n2\n12\n1\n\n\n28\n목\n17\n0.246\n73\n61\n8\n15\n3\n0\n2\n10\n0\n0\n11\n0\n17\n1\n\n\n29\n금\n22\n0.342\n90\n79\n11\n27\n4\n0\n4\n15\n0\n0\n9\n1\n16\n1\n\n\n30\n토\n22\n0.342\n95\n79\n12\n27\n5\n0\n2\n18\n0\n0\n13\n2\n12\n0\n\n\n\n\n\n\n\n\n\n# 요일별 지표 변화\n# subplots 생성\nfig = make_subplots(rows=2, cols=2, subplot_titles=('요일 별 타율 변화', '요일 별 홈런 수 변화', '요일 별 득점 변화', '요일 별 타점 변화'))\n\n# Plotting AVG - 타율\nfig.add_trace(go.Scatter(x=최형우_경기별기록_요일별['구분'], y=최형우_경기별기록_요일별['AVG'], mode='lines+markers', name='타율'), row=1, col=1)\n\n# Plotting HR - 홈런\nfig.add_trace(go.Scatter(x=최형우_경기별기록_요일별['구분'], y=최형우_경기별기록_요일별['HR'], mode='lines+markers', name='홈런'), row=1, col=2)\n\n# Plotting R - 득점\nfig.add_trace(go.Scatter(x=최형우_경기별기록_요일별['구분'], y=최형우_경기별기록_요일별['R'], mode='lines+markers', name='득점'), row=2, col=1)\n\n# Plotting RBI - 타점\nfig.add_trace(go.Scatter(x=최형우_경기별기록_요일별['구분'], y=최형우_경기별기록_요일별['RBI'], mode='lines+markers', name='타점'), row=2, col=2)\n\n# Update layout\nfig.update_layout(title_text='Indicators Change by Day of the Week', showlegend=False)\n\n# Show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>경기별 기록 EDA</span>"
    ]
  },
  {
    "objectID": "ds-camp09(b).html#상황-별-기록",
    "href": "ds-camp09(b).html#상황-별-기록",
    "title": "11  # 선수 순위 표 크롤링",
    "section": "11.2 상황 별 기록",
    "text": "11.2 상황 별 기록\n\n최형우_상황별기록 = pd.read_csv('data/72443상황별기록.csv') # 0~10, 10~22, 22~35, 35~40\n최형우_상황별기록\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n0\n주자없음\n0.294\n204\n60\n17\n1\n8\n8\n22\n5\n45\n0\n\n\n1\n1루\n0.298\n104\n31\n5\n0\n4\n10\n21\n0\n15\n3\n\n\n2\n2루\n0.308\n39\n12\n2\n0\n0\n9\n6\n0\n11\n0\n\n\n3\n3루\n0.231\n13\n3\n0\n0\n0\n3\n5\n0\n3\n0\n\n\n4\n1,2루\n0.351\n37\n13\n2\n0\n3\n20\n5\n1\n3\n2\n\n\n5\n1,3루\n0.125\n16\n2\n1\n0\n1\n8\n2\n0\n2\n0\n\n\n6\n2,3루\n0.667\n3\n2\n0\n0\n0\n4\n3\n1\n1\n0\n\n\n7\n만루\n0.467\n15\n7\n0\n0\n1\n19\n1\n1\n3\n0\n\n\n8\n주자있음\n0.308\n227\n70\n10\n0\n9\n73\n43\n3\n38\n5\n\n\n9\n득점권\n0.317\n123\n39\n5\n0\n5\n63\n22\n3\n23\n2\n\n\n10\n0-0\n0.426\n47\n20\n5\n0\n5\n16\n0\n3\n0\n1\n\n\n11\n1-0\n0.275\n40\n11\n1\n0\n3\n9\n0\n0\n0\n1\n\n\n12\n2-0\n0.333\n3\n1\n1\n0\n0\n1\n1\n1\n0\n0\n\n\n13\n3-0\n-\n0\n0\n0\n0\n0\n1\n14\n0\n0\n0\n\n\n14\n0-1\n0.438\n48\n21\n6\n0\n1\n12\n0\n0\n0\n0\n\n\n15\n1-1\n0.405\n42\n17\n6\n0\n1\n5\n0\n0\n0\n1\n\n\n16\n2-1\n0.308\n26\n8\n1\n0\n3\n11\n0\n0\n0\n1\n\n\n17\n3-1\n0.273\n11\n3\n0\n0\n0\n1\n26\n0\n0\n0\n\n\n18\n0-2\n0.133\n30\n4\n1\n0\n1\n3\n0\n1\n12\n0\n\n\n19\n1-2\n0.163\n49\n8\n2\n0\n0\n4\n0\n1\n22\n1\n\n\n20\n2-2\n0.292\n72\n21\n1\n1\n2\n10\n0\n2\n30\n0\n\n\n21\n3-2\n0.254\n63\n16\n3\n0\n1\n8\n24\n0\n19\n0\n\n\n22\n1회\n0.310\n58\n18\n4\n0\n2\n16\n8\n1\n9\n1\n\n\n23\n2회\n0.348\n46\n16\n5\n0\n2\n3\n8\n1\n12\n0\n\n\n24\n3회\n0.275\n51\n14\n2\n0\n1\n7\n6\n0\n12\n0\n\n\n25\n4회\n0.275\n51\n14\n1\n0\n2\n8\n10\n3\n14\n1\n\n\n26\n5회\n0.341\n41\n14\n3\n0\n3\n11\n8\n1\n5\n0\n\n\n27\n6회\n0.288\n59\n17\n4\n0\n1\n8\n8\n0\n11\n2\n\n\n28\n7회\n0.333\n48\n16\n3\n0\n4\n14\n6\n0\n8\n1\n\n\n29\n8회\n0.256\n39\n10\n3\n1\n1\n5\n6\n2\n8\n0\n\n\n30\n9회\n0.314\n35\n11\n2\n0\n1\n9\n5\n0\n4\n0\n\n\n31\n연장\n0.000\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n32\n1~3회\n0.310\n155\n48\n11\n0\n5\n26\n22\n2\n33\n1\n\n\n33\n4~6회\n0.298\n151\n45\n8\n0\n6\n27\n26\n4\n30\n3\n\n\n34\n7회이후\n0.296\n125\n37\n8\n1\n6\n28\n17\n2\n20\n1\n\n\n35\n4번타자\n0.307\n375\n115\n25\n1\n15\n67\n55\n7\n75\n4\n\n\n36\n5번타자\n0.265\n49\n13\n2\n0\n1\n8\n9\n1\n6\n1\n\n\n37\n6번타자\n0.000\n4\n0\n0\n0\n0\n0\n0\n0\n2\n0\n\n\n38\n7번타자\n1.000\n1\n1\n0\n0\n1\n4\n1\n0\n0\n0\n\n\n39\n8번타자\n0.000\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n40\n9번타자\n1.000\n1\n1\n0\n0\n0\n2\n0\n0\n0\n0\n\n\n41\n좌투수\n0.322\n118\n38\n6\n1\n8\n34\n15\n1\n26\n1\n\n\n42\n우투수\n0.296\n270\n80\n20\n0\n5\n37\n41\n5\n51\n4\n\n\n43\n언더투수\n0.279\n43\n12\n1\n0\n4\n10\n9\n2\n6\n0\n\n\n44\n0아웃\n0.314\n159\n50\n12\n1\n8\n24\n17\n1\n31\n2\n\n\n45\n1아웃\n0.308\n120\n37\n7\n0\n5\n26\n29\n4\n25\n3\n\n\n46\n2아웃\n0.283\n152\n43\n8\n0\n4\n31\n19\n3\n27\n0\n\n\n\n\n\n\n\n\n\n# AVG 컬럼 object type float형태로 연산이 가능하도록 변경\n최형우_상황별기록['AVG'] = pd.to_numeric(최형우_상황별기록['AVG'], errors='coerce')\n\n\n11.2.1 데이터프레임 상황별 나누기\n\n최형우_상황별기록_주자상황별 = 최형우_상황별기록[:10]\n최형우_상황별기록_볼카운트별 = 최형우_상황별기록[10:22]\n최형우_상황별기록_이닝별 = 최형우_상황별기록[22:35]\n최형우_상황별기록_타순별 = 최형우_상황별기록[35:40]\n최형우_상황별기록_투수유형별 = 최형우_상황별기록[40:43]\n최형우_상황별기록_아웃카운트별 = 최형우_상황별기록[43:46]\n\n\n\n11.2.2 주자상황별\n\n최형우_상황별기록_주자상황별\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n0\n주자없음\n0.294\n204\n60\n17\n1\n8\n8\n22\n5\n45\n0\n\n\n1\n1루\n0.298\n104\n31\n5\n0\n4\n10\n21\n0\n15\n3\n\n\n2\n2루\n0.308\n39\n12\n2\n0\n0\n9\n6\n0\n11\n0\n\n\n3\n3루\n0.231\n13\n3\n0\n0\n0\n3\n5\n0\n3\n0\n\n\n4\n1,2루\n0.351\n37\n13\n2\n0\n3\n20\n5\n1\n3\n2\n\n\n5\n1,3루\n0.125\n16\n2\n1\n0\n1\n8\n2\n0\n2\n0\n\n\n6\n2,3루\n0.667\n3\n2\n0\n0\n0\n4\n3\n1\n1\n0\n\n\n7\n만루\n0.467\n15\n7\n0\n0\n1\n19\n1\n1\n3\n0\n\n\n8\n주자있음\n0.308\n227\n70\n10\n0\n9\n73\n43\n3\n38\n5\n\n\n9\n득점권\n0.317\n123\n39\n5\n0\n5\n63\n22\n3\n23\n2\n\n\n\n\n\n\n\n\n\nfig = px.bar(최형우_상황별기록_주자상황별, x=최형우_상황별기록_주자상황별['구분'], y=최형우_상황별기록_주자상황별['AVG'], title='주자 상황 별 타율')\nfig.update_xaxes(title_text='Runner Situation')\nfig.update_yaxes(title_text='Batting Average')\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# 주자상황별 지표 변화\n\n# subplots 생성\nfig = make_subplots(rows=2, cols=2, subplot_titles=('상황 별 타율', '상황 별 2루타', '상황 별 홈런', '상황 별 타점'))\n\n# Plotting HR - 타율\nfig.add_trace(go.Scatter(x=최형우_상황별기록_주자상황별['구분'], y=최형우_상황별기록_주자상황별['AVG'], mode='lines+markers', name='타율'), row=1, col=1)\n\n# Plotting HR - 2루타\nfig.add_trace(go.Scatter(x=최형우_상황별기록_주자상황별['구분'], y=최형우_상황별기록_주자상황별['2B'], mode='lines+markers', name='홈런'), row=1, col=2)\n\n# Plotting R - 홈런\nfig.add_trace(go.Scatter(x=최형우_상황별기록_주자상황별['구분'], y=최형우_상황별기록_주자상황별['HR'], mode='lines+markers', name='득점'), row=2, col=1)\n\n# Plotting RBI - 타점\nfig.add_trace(go.Scatter(x=최형우_상황별기록_주자상황별['구분'], y=최형우_상황별기록_주자상황별['RBI'], mode='lines+markers', name='타점'), row=2, col=2)\n\n# Update layout\nfig.update_layout(title_text='주자 상황 별 지표 변화', showlegend=False)\n\n# Show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n11.2.3 볼카운트 별\n\n최형우_상황별기록_볼카운트별\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n10\n0-0\n0.426\n47\n20\n5\n0\n5\n16\n0\n3\n0\n1\n\n\n11\n1-0\n0.275\n40\n11\n1\n0\n3\n9\n0\n0\n0\n1\n\n\n12\n2-0\n0.333\n3\n1\n1\n0\n0\n1\n1\n1\n0\n0\n\n\n13\n3-0\nNaN\n0\n0\n0\n0\n0\n1\n14\n0\n0\n0\n\n\n14\n0-1\n0.438\n48\n21\n6\n0\n1\n12\n0\n0\n0\n0\n\n\n15\n1-1\n0.405\n42\n17\n6\n0\n1\n5\n0\n0\n0\n1\n\n\n16\n2-1\n0.308\n26\n8\n1\n0\n3\n11\n0\n0\n0\n1\n\n\n17\n3-1\n0.273\n11\n3\n0\n0\n0\n1\n26\n0\n0\n0\n\n\n18\n0-2\n0.133\n30\n4\n1\n0\n1\n3\n0\n1\n12\n0\n\n\n19\n1-2\n0.163\n49\n8\n2\n0\n0\n4\n0\n1\n22\n1\n\n\n20\n2-2\n0.292\n72\n21\n1\n1\n2\n10\n0\n2\n30\n0\n\n\n21\n3-2\n0.254\n63\n16\n3\n0\n1\n8\n24\n0\n19\n0\n\n\n\n\n\n\n\n\n\n# 볼카운트 별 지표 시각화\n\n# subplots 생성\nfig = make_subplots(rows=2, cols=2, subplot_titles=('볼카운트 별 타율', '볼카운트 별 2루타', '볼카운트 별 홈런', '볼카운트 별 타점'))\n\n# Plotting HR - 타율\nfig.add_trace(go.Scatter(x=최형우_상황별기록_볼카운트별['구분'], y=최형우_상황별기록_볼카운트별['AVG'], mode='lines+markers', name='타율'), row=1, col=1)\n\n# Plotting HR - 2루타\nfig.add_trace(go.Scatter(x=최형우_상황별기록_볼카운트별['구분'], y=최형우_상황별기록_볼카운트별['2B'], mode='lines+markers', name='홈런'), row=1, col=2)\n\n# Plotting R - 홈런\nfig.add_trace(go.Scatter(x=최형우_상황별기록_볼카운트별['구분'], y=최형우_상황별기록_볼카운트별['HR'], mode='lines+markers', name='득점'), row=2, col=1)\n\n# Plotting RBI - 타점\nfig.add_trace(go.Scatter(x=최형우_상황별기록_볼카운트별['구분'], y=최형우_상황별기록_볼카운트별['RBI'], mode='lines+markers', name='타점'), row=2, col=2)\n\n# Update layout\nfig.update_layout(title_text='볼카운트 상황 별 지표 변화', showlegend=False)\n\n# Show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n11.2.4 이닝 별\n\n최형우_상황별기록_이닝별\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n22\n1회\n0.310\n58\n18\n4\n0\n2\n16\n8\n1\n9\n1\n\n\n23\n2회\n0.348\n46\n16\n5\n0\n2\n3\n8\n1\n12\n0\n\n\n24\n3회\n0.275\n51\n14\n2\n0\n1\n7\n6\n0\n12\n0\n\n\n25\n4회\n0.275\n51\n14\n1\n0\n2\n8\n10\n3\n14\n1\n\n\n26\n5회\n0.341\n41\n14\n3\n0\n3\n11\n8\n1\n5\n0\n\n\n27\n6회\n0.288\n59\n17\n4\n0\n1\n8\n8\n0\n11\n2\n\n\n28\n7회\n0.333\n48\n16\n3\n0\n4\n14\n6\n0\n8\n1\n\n\n29\n8회\n0.256\n39\n10\n3\n1\n1\n5\n6\n2\n8\n0\n\n\n30\n9회\n0.314\n35\n11\n2\n0\n1\n9\n5\n0\n4\n0\n\n\n31\n연장\n0.000\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n32\n1~3회\n0.310\n155\n48\n11\n0\n5\n26\n22\n2\n33\n1\n\n\n33\n4~6회\n0.298\n151\n45\n8\n0\n6\n27\n26\n4\n30\n3\n\n\n34\n7회이후\n0.296\n125\n37\n8\n1\n6\n28\n17\n2\n20\n1\n\n\n\n\n\n\n\n\n\n# 이닝 별 지표 시각화\n\n# subplots 생성\nfig = make_subplots(rows=2, cols=2, subplot_titles=('이닝 별 타율', '이닝 별 2루타', '이닝 별 홈런', '이닝 별 타점'))\n\n# Plotting HR - 타율\nfig.add_trace(go.Scatter(x=최형우_상황별기록_이닝별['구분'], y=최형우_상황별기록_이닝별['AVG'], mode='lines+markers', name='타율'), row=1, col=1)\n\n# Plotting HR - 2루타\nfig.add_trace(go.Scatter(x=최형우_상황별기록_이닝별['구분'], y=최형우_상황별기록_이닝별['2B'], mode='lines+markers', name='홈런'), row=1, col=2)\n\n# Plotting R - 홈런\nfig.add_trace(go.Scatter(x=최형우_상황별기록_이닝별['구분'], y=최형우_상황별기록_이닝별['HR'], mode='lines+markers', name='득점'), row=2, col=1)\n\n# Plotting RBI - 타점\nfig.add_trace(go.Scatter(x=최형우_상황별기록_이닝별['구분'], y=최형우_상황별기록_이닝별['RBI'], mode='lines+markers', name='타점'), row=2, col=2)\n\n# Update layout\nfig.update_layout(title_text='이닝 별 지표 변화', showlegend=False)\n\n# Show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n5, 7, 9회 타율이 상대적으로 높은 것을 알 수 있다.\n\n\n11.2.5 타순 별\n\n최형우_상황별기록_타순별\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n35\n4번타자\n0.307\n375\n115\n25\n1\n15\n67\n55\n7\n75\n4\n\n\n36\n5번타자\n0.265\n49\n13\n2\n0\n1\n8\n9\n1\n6\n1\n\n\n37\n6번타자\n0.000\n4\n0\n0\n0\n0\n0\n0\n0\n2\n0\n\n\n38\n7번타자\n1.000\n1\n1\n0\n0\n1\n4\n1\n0\n0\n0\n\n\n39\n8번타자\n0.000\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n\n11.2.6 투수 유형 별\n\n최형우_상황별기록_투수유형별\n\n\n\n\n\n\n\n\n\n구분\nAVG\nAB\nH\n2B\n3B\nHR\nRBI\nBB\nHBP\nSO\nGDP\n\n\n\n\n40\n9번타자\n1.000\n1\n1\n0\n0\n0\n2\n0\n0\n0\n0\n\n\n41\n좌투수\n0.322\n118\n38\n6\n1\n8\n34\n15\n1\n26\n1\n\n\n42\n우투수\n0.296\n270\n80\n20\n0\n5\n37\n41\n5\n51\n4\n\n\n\n\n\n\n\n\n\n# 투수 유형 별 지표 시각화\n\n# subplots 생성\nfig = make_subplots(rows=2, cols=2, subplot_titles=('투수 유형 별 타율', '투수 유형 별 2루타', '투수 유형 별 홈런', '투수 유형 별 타점'))\n\n# 타율\nfig.add_trace(go.Bar(x=최형우_상황별기록_투수유형별['구분'], y=최형우_상황별기록_투수유형별['AVG'], name='타율'), row=1, col=1)\n\n# 2루타\nfig.add_trace(go.Bar(x=최형우_상황별기록_투수유형별['구분'], y=최형우_상황별기록_투수유형별['2B'], name='홈런'), row=1, col=2)\n\n# 홈런\nfig.add_trace(go.Bar(x=최형우_상황별기록_투수유형별['구분'], y=최형우_상황별기록_투수유형별['HR'], name='득점'), row=2, col=1)\n\n# 타점\nfig.add_trace(go.Bar(x=최형우_상황별기록_투수유형별['구분'], y=최형우_상황별기록_투수유형별['RBI'], name='타점'), row=2, col=2)\n\n# Update layout\nfig.update_layout(title_text='투수 유형 별 지표 변화', showlegend=False)\n\n# Show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>경기별 기록 EDA</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html",
    "href": "ds-camp10.html",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "",
    "text": "12.1 데이터 분석 준비하기",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#데이터-분석-준비하기",
    "href": "ds-camp10.html#데이터-분석-준비하기",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "",
    "text": "12.1.1 1. 데이터 준비하기\n\n\n12.1.2 2. 패키지 설치 및 로드하기\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport koreanize_matplotlib\n%config InlineBackend.figure_format = 'retina'\n\n\n12.1.2.1 3. 데이터 불러오기\n\nraw_welfare = pd.read_spss('data/Koweps_hpwc14_2019_beta2.sav')\nwelfare = raw_welfare.copy()\n\n\n\n12.1.2.2 4. 데이터 검토하기\n\nwelfare\n\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14413\n9800.0\n7.0\n1.0\n98000701.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n14414\n9800.0\n7.0\n1.0\n98000701.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n14415\n9800.0\n7.0\n1.0\n98000701.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n208.0\nNaN\n0.0\nNaN\n\n\n14416\n9800.0\n7.0\n1.0\n98000701.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n5.0\n.\n4.0\n3.0\n3.0\nNaN\n1200.0\nNaN\n0.0\nNaN\n\n\n14417\n9800.0\n7.0\n1.0\n98000701.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n14418 rows × 830 columns\n\n\n\n\n\nwelfare.shape       # 행, 열 개수 출력\n\n(14418, 830)\n\n\n\nwelfare.info()      # 변수 속성 출력\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 14418 entries, 0 to 14417\nColumns: 830 entries, h14_id to h14_pers_income5\ndtypes: float64(826), object(4)\nmemory usage: 91.3+ MB\n\n\n\nwelfare.describe()  # 요약 통계량\n\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_63\nwc14_64\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\ncount\n14418.000000\n14418.000000\n14418.000000\n1.441800e+04\n14418.000000\n121.000000\n11513.000000\n11513.000000\n11513.000000\n11513.000000\n...\n2027.000000\n2027.000000\n2027.000000\n2027.000000\n2027.000000\n2659.000000\n3331.000000\n989.000000\n14418.000000\n715.000000\n\n\nmean\n4672.108406\n3.121723\n1.004855\n4.672140e+07\n0.201484\n2.256198\n1.000000\n1.000000\n4484.952219\n4484.952541\n...\n3.211643\n3.743957\n3.513567\n4.100641\n3.233350\n4141.380594\n1389.440408\n3457.835187\n2.038702\n1183.292308\n\n\nstd\n2792.998128\n3.297963\n0.143205\n2.793014e+07\n0.401123\n1.675952\n0.906021\n1.016782\n4063.459773\n4560.218659\n...\n2.174768\n3.138629\n1.045929\n0.937712\n1.289456\n2583.755449\n1211.910836\n6619.516319\n32.965477\n2147.418274\n\n\nmin\n2.000000\n1.000000\n1.000000\n2.010100e+04\n0.000000\n1.000000\n0.001998\n0.000000\n8.960093\n0.000000\n...\n1.000000\n1.000000\n1.000000\n1.000000\n1.000000\n0.000000\n0.000000\n-47000.000000\n0.000000\n-10600.000000\n\n\n25%\n2356.000000\n1.000000\n1.000000\n2.356030e+07\n0.000000\n1.000000\n0.341814\n0.269286\n1533.021553\n1207.736094\n...\n1.000000\n2.000000\n3.000000\n4.000000\n2.000000\n2448.000000\n391.500000\n1000.000000\n0.000000\n206.000000\n\n\n50%\n4535.000000\n1.000000\n1.000000\n4.535010e+07\n0.000000\n2.000000\n0.726304\n0.704045\n3257.436901\n3157.609630\n...\n3.000000\n3.000000\n4.000000\n4.000000\n3.000000\n3540.000000\n1116.000000\n2498.000000\n0.000000\n530.000000\n\n\n75%\n6616.000000\n7.000000\n1.000000\n6.616010e+07\n0.000000\n2.000000\n1.366071\n1.390045\n6126.762919\n6234.287538\n...\n5.000000\n5.000000\n4.000000\n5.000000\n4.000000\n5378.500000\n2040.000000\n4687.000000\n0.000000\n1295.000000\n\n\nmax\n9800.000000\n14.000000\n9.000000\n9.800070e+07\n1.000000\n7.000000\n4.727006\n5.790039\n21200.393903\n25968.049029\n...\n9.000000\n99.000000\n9.000000\n9.000000\n9.000000\n22700.000000\n11500.000000\n170000.000000\n3000.000000\n22644.000000\n\n\n\n\n8 rows × 826 columns\n\n\n\n\n\n\n12.1.2.3 5. 변수명 바꾸기\n\nwelfare = welfare.rename(columns = {'h14_g3'     : 'sex',            #  성별\n                                    'h14_g4'     : 'birth',          #  태어난 연도\n                                    'h14_g10'    : 'marriage_type',  #  혼인 상태\n                                    'h14_g11'    : 'religion',       #  종교 \n                                    'p1402_8aq1' : 'income',         #  월급 \n                                    'h14_eco9'   : 'code_job',       #  직업 코드\n                                    'h14_reg7'   : 'code_region'})   #  지역 코드",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-성별에-따른-월급-차이---성별에-따라-월급이-다를까",
    "href": "ds-camp10.html#q.-성별에-따른-월급-차이---성별에-따라-월급이-다를까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.2 Q. 성별에 따른 월급 차이 - 성별에 따라 월급이 다를까?",
    "text": "12.2 Q. 성별에 따른 월급 차이 - 성별에 따라 월급이 다를까?\n\n12.2.1 변수 검토하기\n\nwelfare['sex'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['sex'].value_counts()  # 빈도 구하기\n\nsex\n2.0    7913\n1.0    6505\nName: count, dtype: int64\n\n\n\n\n12.2.2 전처리하기\n\n# 이상치 확인\nwelfare['sex'].value_counts()\n\nsex\n2.0    7913\n1.0    6505\nName: count, dtype: int64\n\n\n\n# 이상치 결측 처리\nwelfare['sex'] = np.where(welfare['sex'] == 9, np.nan, welfare['sex'])\n \n# 결측치 확인\nwelfare['sex'].isna().sum()\n\n0\n\n\n\n# 성별 항목 이름 부여\nwelfare['sex'] = np.where(welfare['sex'] == 1, 'male', 'female')\n\n# 빈도 구하기\nwelfare['sex'].value_counts()\n\nsex\nfemale    7913\nmale      6505\nName: count, dtype: int64\n\n\n\n# 빈도 막대 그래프 만들기\nsns.countplot(data = welfare, x = 'sex')\n\n\n\n\n\n\n\n\n\n\n12.2.3 변수 검토하기\n\nwelfare['income'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['income'].describe()  # 요약 통계량 구하기\n\ncount    4534.000000\nmean      268.455007\nstd       198.021206\nmin         0.000000\n25%       150.000000\n50%       220.000000\n75%       345.750000\nmax      1892.000000\nName: income, dtype: float64\n\n\n\nsns.histplot(data = welfare, x = 'income')  # 히스토그램 만들기\n\n\n\n\n\n\n\n\n\n\n12.2.4 전처리하기\n\nwelfare['income'].describe()  # 이상치 확인\n\ncount    4534.000000\nmean      268.455007\nstd       198.021206\nmin         0.000000\n25%       150.000000\n50%       220.000000\n75%       345.750000\nmax      1892.000000\nName: income, dtype: float64\n\n\n\nwelfare['income'].isna().sum()  # 결측치 확인\n\n9884\n\n\n\n# 이상치 결측 처리\nwelfare['income'] = np.where(welfare['income'] == 9999, np.nan, welfare['income'])\n\n# 결측치 확인\nwelfare['income'].isna().sum()\n\n9884\n\n\n\n\n12.2.5 성별 월급 평균표 만들기\n\n## 성별 월급 평균표 만들기\n\n# income 결측치 제거\n# sex별 분리\n# income 평균 구하기\nsex_income = welfare.dropna(subset = ['income']) \\\n                    .groupby('sex', as_index = False) \\\n                    .agg(mean_income = ('income', 'mean'))\nsex_income\n\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571\n\n\n\n\n\n\n\n\n\n\n12.2.6 그래프 만들기\n\n# 막대 그래프 만들기\nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-나이와-월급의-관계---몇-살-때-월급을-가장-많이-받을까",
    "href": "ds-camp10.html#q.-나이와-월급의-관계---몇-살-때-월급을-가장-많이-받을까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.3 Q. 나이와 월급의 관계 - 몇 살 때 월급을 가장 많이 받을까?",
    "text": "12.3 Q. 나이와 월급의 관계 - 몇 살 때 월급을 가장 많이 받을까?\n\n12.3.1 변수 검토하기\n\nwelfare['birth'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['birth'].describe()  # 요약 통계량 구하기\n\ncount    14418.000000\nmean      1969.280205\nstd         24.402250\nmin       1907.000000\n25%       1948.000000\n50%       1968.000000\n75%       1990.000000\nmax       2018.000000\nName: birth, dtype: float64\n\n\n\nsns.histplot(data = welfare, x = 'birth')  # 히스토그램 만들기\n\n\n\n\n\n\n\n\n\n\n12.3.2 전처리하기\n\nwelfare['birth'].describe()  # 이상치 확인\n\ncount    14418.000000\nmean      1969.280205\nstd         24.402250\nmin       1907.000000\n25%       1948.000000\n50%       1968.000000\n75%       1990.000000\nmax       2018.000000\nName: birth, dtype: float64\n\n\n\nwelfare['birth'].isna().sum()  # 결측치 확인\n\n0\n\n\n\n# 이상치 결측 처리\nwelfare['birth'] = np.where(welfare['birth'] == 9999, np.nan, welfare['birth'])\n\n# 결측치 확인\nwelfare['birth'].isna().sum()\n\n0\n\n\n\n\n12.3.3 파생변수 만들기 - 나이\n\nwelfare = welfare.assign(age = 2024 - welfare['birth'])  # 나이 변수 만들기\nwelfare['age'].describe()                                # 요약 통계량 구하기\n\ncount    14418.000000\nmean        54.719795\nstd         24.402250\nmin          6.000000\n25%         34.000000\n50%         56.000000\n75%         76.000000\nmax        117.000000\nName: age, dtype: float64\n\n\n\nsns.histplot(data = welfare, x = 'age')  # 히스토그램 만들기\n\n\n\n\n\n\n\n\n\n\n12.3.4 나이에 따른 월급 평균표 만들기\n\n## 나이별 월급 평균표 만들기\n\n# income 결측치 제거\n# age별 분리\n# income 평균 구하기\nage_income = welfare.dropna(subset = ['income']) \\\n                    .groupby('age') \\\n                    .agg(mean_income = ('income', 'mean'))\nage_income.head()\n\n\n\n\n\n\n\n\n\nmean_income\n\n\nage\n\n\n\n\n\n23.0\n162.000000\n\n\n24.0\n121.333333\n\n\n25.0\n136.400000\n\n\n26.0\n123.666667\n\n\n27.0\n179.676471\n\n\n\n\n\n\n\n\n\n\n12.3.5 그래프 만들기\n\n# 선 그래프 만들기\nsns.lineplot(data = age_income, x = 'age', y = 'mean_income')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-연령대에-따른-월급-차이---어떤-연령대의-월급이-가장-많을까",
    "href": "ds-camp10.html#q.-연령대에-따른-월급-차이---어떤-연령대의-월급이-가장-많을까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.4 Q. 연령대에 따른 월급 차이 - 어떤 연령대의 월급이 가장 많을까?",
    "text": "12.4 Q. 연령대에 따른 월급 차이 - 어떤 연령대의 월급이 가장 많을까?\n\n12.4.1 파생변수 만들기 - 연령대\n\n# 나이 변수 살펴보기\nwelfare['age'].head()\n\n0    79.0\n1    76.0\n2    82.0\n3    62.0\n4    61.0\nName: age, dtype: float64\n\n\n\n# 연령대 변수 만들기\nwelfare = welfare.assign(ageg = np.where(welfare['age'] &lt;  30, 'young',\n                                np.where(welfare['age'] &lt;= 59, 'middle', 'old')))\n\n# 빈도 구하기\nwelfare['ageg'].value_counts()\n\nageg\nold       6687\nmiddle    4779\nyoung     2952\nName: count, dtype: int64\n\n\n\n# 빈도 막대 그래프 만들기\nsns.countplot(data = welfare, x = 'ageg')\n\n\n\n\n\n\n\n\n\n\n12.4.2 연령대별 월급 평균표 만들기\n\n## 연령대별 월급 평균표 만들기\n\n# income 결측치 제거\n# ageg별 분리\n# income 평균 구하기\nageg_income = welfare.dropna(subset = ['income']) \\\n                     .groupby('ageg', as_index = False) \\\n                     .agg(mean_income = ('income', 'mean'))\nageg_income\n\n\n\n\n\n\n\n\n\nageg\nmean_income\n\n\n\n\n0\nmiddle\n318.787366\n\n\n1\nold\n181.846579\n\n\n2\nyoung\n160.610526\n\n\n\n\n\n\n\n\n\n\n12.4.3 그래프 만들기\n\n# 막대 그래프 만들기\nsns.barplot(data = ageg_income, x = 'ageg', y = 'mean_income')\n\n\n\n\n\n\n\n\n\n# 막대 정렬하기\nsns.barplot(data = ageg_income, x = 'ageg', y = 'mean_income',\n            order = ['young', 'middle', 'old'])",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-연령대-및-성별-월급-차이---성별-월급-차이는-연령대별로-다를까",
    "href": "ds-camp10.html#q.-연령대-및-성별-월급-차이---성별-월급-차이는-연령대별로-다를까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.5 Q. 연령대 및 성별 월급 차이 - 성별 월급 차이는 연령대별로 다를까?",
    "text": "12.5 Q. 연령대 및 성별 월급 차이 - 성별 월급 차이는 연령대별로 다를까?\n\n12.5.1 연령대 및 성별 월급 평균표 만들기\n\n## 연령대 및 성별 평균표 만들기\n\n# income 결측치 제거\n# ageg 및 sex별 분리\n# income 평균 구하기\nsex_income = welfare.dropna(subset = ['income']) \\\n                    .groupby(['ageg', 'sex'], as_index = False) \\\n                    .agg(mean_income = ('income', 'mean'))\nsex_income\n\n\n\n\n\n\n\n\n\nageg\nsex\nmean_income\n\n\n\n\n0\nmiddle\nfemale\n235.104262\n\n\n1\nmiddle\nmale\n388.250158\n\n\n2\nold\nfemale\n109.727503\n\n\n3\nold\nmale\n268.323708\n\n\n4\nyoung\nfemale\n160.042254\n\n\n5\nyoung\nmale\n162.291667\n\n\n\n\n\n\n\n\n\n\n12.5.2 그래프 만들기\n\n# 막대 그래프 만들기\nsns.barplot(data = sex_income, x = 'ageg', y = 'mean_income', hue = 'sex',\n            order = ['young', 'middle', 'old'])\n\n\n\n\n\n\n\n\n\n\n12.5.3 나이 및 성별 월급 차이 분석하기\n\n## 나이 및 성별 월급 평균표 만들기\n\n# income 결측치 제거\n# age 및 sex별 분리\n# income 평균 구하기\nsex_age = welfare.dropna(subset = ['income']) \\\n                 .groupby(['age', 'sex'], as_index = False) \\\n                 .agg(mean_income = ('income', 'mean'))\nsex_age.head()\n\n\n\n\n\n\n\n\n\nage\nsex\nmean_income\n\n\n\n\n0\n23.0\nmale\n162.000000\n\n\n1\n24.0\nfemale\n87.666667\n\n\n2\n24.0\nmale\n155.000000\n\n\n3\n25.0\nfemale\n124.000000\n\n\n4\n25.0\nmale\n186.000000\n\n\n\n\n\n\n\n\n\n# 선 그래프 만들기\nsns.lineplot(data = sex_age, x = 'age', y = 'mean_income', hue = 'sex')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-직업별-월급-차이---어떤-직업이-월급을-가장-많이-받을까",
    "href": "ds-camp10.html#q.-직업별-월급-차이---어떤-직업이-월급을-가장-많이-받을까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.6 Q. 직업별 월급 차이 - 어떤 직업이 월급을 가장 많이 받을까?",
    "text": "12.6 Q. 직업별 월급 차이 - 어떤 직업이 월급을 가장 많이 받을까?\n\n12.6.1 변수 검토하기\n\nwelfare['code_job'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['code_job'].value_counts()  # 빈도 구하기\n\ncode_job\n611.0    962\n941.0    391\n521.0    354\n312.0    275\n873.0    236\n        ... \n112.0      2\n784.0      2\n423.0      1\n861.0      1\n872.0      1\nName: count, Length: 150, dtype: int64\n\n\n\n\n12.6.2 전처리하기\n\nlist_job = pd.read_excel('data/Koweps_Codebook_2019.xlsx', sheet_name = '직종코드')\nlist_job.head()\n\n\n\n\n\n\n\n\n\ncode_job\njob\n\n\n\n\n0\n111\n의회 의원∙고위 공무원 및 공공단체 임원\n\n\n1\n112\n기업 고위 임원\n\n\n2\n121\n행정 및 경영 지원 관리자\n\n\n3\n122\n마케팅 및 광고∙홍보 관리자\n\n\n4\n131\n연구∙교육 및 법률 관련 관리자\n\n\n\n\n\n\n\n\n\nlist_job.shape  # 행, 열 개수 출력\n\n(156, 2)\n\n\n\n# welfare에 list_job 결합하기\nwelfare = welfare.merge(list_job, how = 'left', on = 'code_job')\n\n\n# code_job 결측치 제거하고 code_job, job 출력\nwelfare.dropna(subset = ['code_job'])[['code_job', 'job']].head()\n\n\n\n\n\n\n\n\n\ncode_job\njob\n\n\n\n\n2\n762.0\n전기공\n\n\n3\n855.0\n금속기계 부품 조립원\n\n\n7\n941.0\n청소원 및 환경미화원\n\n\n8\n999.0\n기타 서비스 관련 단순 종사자\n\n\n14\n312.0\n경영 관련 사무원\n\n\n\n\n\n\n\n\n\n\n12.6.3 직업별 월급 평균표 만들기\n\n## 직업별 월급 평균표 만들기\n\n# job, income 결측치 제거\n# job별 분리\n# income 평균 구하기\njob_income = welfare.dropna(subset = ['job', 'income']) \\\n                    .groupby('job', as_index = False) \\\n                    .agg(mean_income = ('income', 'mean'))\njob_income.head()\n\n\n\n\n\n\n\n\n\njob\nmean_income\n\n\n\n\n0\n가사 및 육아 도우미\n92.455882\n\n\n1\n간호사\n265.219178\n\n\n2\n감정∙기술영업및중개관련종사자\n391.000000\n\n\n3\n건물 관리원 및 검표원\n168.375000\n\n\n4\n건설 및 광업 단순 종사자\n261.975000\n\n\n\n\n\n\n\n\n\n\n12.6.4 그래프 만들기\n(1) 월급이 많은 직업\n\n# 상위 10위 추출\ntop10 = job_income.sort_values('mean_income', ascending = False).head(10)\ntop10\n\n\n\n\n\n\n\n\n\njob\nmean_income\n\n\n\n\n98\n의료 진료 전문가\n781.000000\n\n\n60\n법률 전문가\n776.333333\n\n\n140\n행정 및 경영 지원 관리자\n771.833333\n\n\n63\n보험 및 금융 관리자\n734.750000\n\n\n110\n재활용 처리 및 소각로 조작원\n688.000000\n\n\n131\n컴퓨터 하드웨어 및 통신공학 전문가\n679.444444\n\n\n24\n기계∙로봇공학 기술자 및 시험원\n669.166667\n\n\n6\n건설∙전기 및 생산 관련 관리자\n603.083333\n\n\n120\n제관원 및 판금원\n597.000000\n\n\n100\n의회 의원∙고위 공무원 및 공공단체 임원\n580.500000\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = top10, y = 'job', x = 'mean_income')\n\nc:\\Users\\sigma\\Practices\\ds-bootcamp\\.venv\\Lib\\site-packages\\IPython\\core\\events.py:82: UserWarning: Glyph 8729 (\\N{BULLET OPERATOR}) missing from current font.\n  func(*args, **kwargs)\nc:\\Users\\sigma\\Practices\\ds-bootcamp\\.venv\\Lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 8729 (\\N{BULLET OPERATOR}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n\n\n\n\n\n\n\n\n\n(2) 월급이 적은 직업\n\n# 하위 10위 추출\nbottom10 = job_income.sort_values('mean_income').head(10)\nbottom10\n\n\n\n\n\n\n\n\n\njob\nmean_income\n\n\n\n\n33\n기타 돌봄∙보건 및 개인 생활 서비스 종사자\n73.964286\n\n\n34\n기타 서비스 관련 단순 종사자\n77.789474\n\n\n128\n청소원 및 환경미화원\n88.461756\n\n\n0\n가사 및 육아 도우미\n92.455882\n\n\n43\n돌봄 및 보건 서비스 종사자\n117.162338\n\n\n97\n음식 관련 단순 종사자\n118.187500\n\n\n39\n농림∙어업 관련 단순 종사자\n122.625000\n\n\n139\n학예사∙사서 및 기록물 관리사\n140.000000\n\n\n126\n채굴 및 토목 관련 기능 종사자\n140.000000\n\n\n135\n판매 관련 단순 종사자\n140.909091\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = bottom10, y = 'job', x = 'mean_income') \\\n   .set(xlim = [0, 800])\n\nc:\\Users\\sigma\\Practices\\ds-bootcamp\\.venv\\Lib\\site-packages\\IPython\\core\\events.py:82: UserWarning: Glyph 8729 (\\N{BULLET OPERATOR}) missing from current font.\n  func(*args, **kwargs)\nc:\\Users\\sigma\\Practices\\ds-bootcamp\\.venv\\Lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 8729 (\\N{BULLET OPERATOR}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-성별-직업-빈도---성별로-어떤-직업이-가장-많을까",
    "href": "ds-camp10.html#q.-성별-직업-빈도---성별로-어떤-직업이-가장-많을까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.7 Q. 성별 직업 빈도 - 성별로 어떤 직업이 가장 많을까?",
    "text": "12.7 Q. 성별 직업 빈도 - 성별로 어떤 직업이 가장 많을까?\n\n12.7.1 성별 직업 빈도표 만들기\n\n## 남성 직업 빈도 상위 10개 추출\n\n# job 결측치 제거\n# male 추출\n# job별 분리\n# job 빈도 구하기\n# 내림차순 정렬\n# 상위 10행 추출\njob_male = welfare.dropna(subset = ['job']) \\\n                  .query('sex == \"male\"') \\\n                  .groupby('job', as_index = False) \\\n                  .agg(n = ('job', 'count')) \\\n                  .sort_values('n', ascending = False) \\\n                  .head(10)\njob_male\n\n\n\n\n\n\n\n\n\njob\nn\n\n\n\n\n107\n작물 재배 종사자\n486\n\n\n104\n자동차 운전원\n230\n\n\n11\n경영 관련 사무원\n216\n\n\n46\n매장 판매 종사자\n142\n\n\n89\n영업 종사자\n113\n\n\n127\n청소원 및 환경미화원\n109\n\n\n4\n건설 및 광업 단순 종사자\n96\n\n\n120\n제조 관련 단순 종사자\n80\n\n\n3\n건물 관리원 및 검표원\n79\n\n\n141\n행정 사무원\n74\n\n\n\n\n\n\n\n\n\n## 여성 직업 빈도 상위 10개 추출\n\n# job 결측치 제거\n# female 추출\n# job별 분리\n# job 빈도 구하기\n# 내림차순 정렬\n# 상위 10행 추출\njob_female = welfare.dropna(subset = ['job']) \\\n                    .query('sex == \"female\"') \\\n                    .groupby('job', as_index = False) \\\n                    .agg(n = ('job', 'count')) \\\n                    .sort_values('n', ascending = False) \\\n                    .head(10)\njob_female\n\n\n\n\n\n\n\n\n\njob\nn\n\n\n\n\n83\n작물 재배 종사자\n476\n\n\n91\n청소원 및 환경미화원\n282\n\n\n33\n매장 판매 종사자\n212\n\n\n106\n회계 및 경리 사무원\n163\n\n\n31\n돌봄 및 보건 서비스 종사자\n155\n\n\n87\n제조 관련 단순 종사자\n148\n\n\n73\n음식 관련 단순 종사자\n126\n\n\n58\n식음료 서비스 종사자\n117\n\n\n88\n조리사\n114\n\n\n24\n기타 서비스 관련 단순 종사자\n97\n\n\n\n\n\n\n\n\n\n\n12.7.2 그래프 만들기\n\n# 남성 직업 빈도 막대 그래프 만들기\nsns.barplot(data = job_male, y = 'job', x = 'n').set(xlim = [0, 500])\n\n\n\n\n\n\n\n\n\n# 여성 직업 빈도 막대 그래프 만들기\nsns.barplot(data = job_female, y = 'job', x = 'n').set(xlim = [0, 500])",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-종교-유무에-따른-이혼율---종교가-있으면-이혼을-덜-할까",
    "href": "ds-camp10.html#q.-종교-유무에-따른-이혼율---종교가-있으면-이혼을-덜-할까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.8 Q. 종교 유무에 따른 이혼율 - 종교가 있으면 이혼을 덜 할까?",
    "text": "12.8 Q. 종교 유무에 따른 이혼율 - 종교가 있으면 이혼을 덜 할까?\n\n12.8.1 변수 검토하기\n\nwelfare['religion'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['religion'].value_counts()  # 빈도 구하기\n\nreligion\n2.0    7815\n1.0    6603\nName: count, dtype: int64\n\n\n\n\n12.8.2 전처리하기\n\n# 종교 유무 이름 부여\nwelfare['religion'] = np.where(welfare['religion'] == 1, 'yes', 'no')\n\n# 빈도 구하기\nwelfare['religion'].value_counts()\n\nreligion\nno     7815\nyes    6603\nName: count, dtype: int64\n\n\n\n# 막대 그래프 만들기\nsns.countplot(data = welfare, x = 'religion')\n\n\n\n\n\n\n\n\n\n\n12.8.3 변수 검토하기\n\nwelfare['marriage_type'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['marriage_type'].value_counts()  # 빈도 구하기\n\nmarriage_type\n1.0    7190\n5.0    2357\n0.0    2121\n2.0    1954\n3.0     689\n4.0      78\n6.0      29\nName: count, dtype: int64\n\n\n\n\n12.8.4 파생변수 만들기 - 이혼 여부\n\n# 이혼 여부 변수 만들기\nwelfare['marriage'] = np.where(welfare['marriage_type'] == 1, 'marriage',\n                      np.where(welfare['marriage_type'] == 3, 'divorce', 'etc'))\n\n\n## 이혼 여부별 빈도\n\n# marriage별 분리\n# marriage별 빈도 구하기\nn_divorce = welfare.groupby('marriage', as_index = False) \\\n                   .agg(n = ('marriage', 'count'))\nn_divorce\n\n\n\n\n\n\n\n\n\nmarriage\nn\n\n\n\n\n0\ndivorce\n689\n\n\n1\netc\n6539\n\n\n2\nmarriage\n7190\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = n_divorce, x = 'marriage', y = 'n')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-종교-유무에-따른-이혼율-분석하기",
    "href": "ds-camp10.html#q.-종교-유무에-따른-이혼율-분석하기",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.9 Q. 종교 유무에 따른 이혼율 분석하기",
    "text": "12.9 Q. 종교 유무에 따른 이혼율 분석하기\n\n12.9.1 종교 유무에 따른 이혼율표 만들기\n\n# etc 제외\n# religion별 분리\n# marriage 추출\n# 비율 구하기\nrel_div = welfare.query('marriage != \"etc\"') \\\n                 .groupby('religion', as_index = False) \\\n                 ['marriage'] \\\n                 .value_counts(normalize = True)\nrel_div\n\n\n\n\n\n\n\n\n\nreligion\nmarriage\nproportion\n\n\n\n\n0\nno\nmarriage\n0.905045\n\n\n1\nno\ndivorce\n0.094955\n\n\n2\nyes\nmarriage\n0.920469\n\n\n3\nyes\ndivorce\n0.079531\n\n\n\n\n\n\n\n\n\n\n12.9.2 그래프 만들기\n\n# divorce 추출\n# 백분율로 바꾸기\n# 반올림\nrel_div = rel_div.query('marriage == \"divorce\"') \\\n                 .assign(proportion = rel_div['proportion'] * 100) \\\n                 .round(1)\nrel_div\n\n\n\n\n\n\n\n\n\nreligion\nmarriage\nproportion\n\n\n\n\n1\nno\ndivorce\n9.5\n\n\n3\nyes\ndivorce\n8.0\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = rel_div, x = 'religion', y = 'proportion')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-연령대-및-종교-유무에-따른-이혼율-분석하기",
    "href": "ds-camp10.html#q.-연령대-및-종교-유무에-따른-이혼율-분석하기",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.10 Q. 연령대 및 종교 유무에 따른 이혼율 분석하기",
    "text": "12.10 Q. 연령대 및 종교 유무에 따른 이혼율 분석하기\n\n12.10.1 연령대별 이혼율표 만들기\n\n# etc 제외\n# ageg별 분리\n# marriage 추출\n# 비율 구하기\nage_div = welfare.query('marriage != \"etc\"') \\\n                 .groupby('ageg', as_index = False) \\\n                 ['marriage'] \\\n                 .value_counts(normalize = True)\nage_div\n\n\n\n\n\n\n\n\n\nageg\nmarriage\nproportion\n\n\n\n\n0\nmiddle\nmarriage\n0.918763\n\n\n1\nmiddle\ndivorce\n0.081237\n\n\n2\nold\nmarriage\n0.907898\n\n\n3\nold\ndivorce\n0.092102\n\n\n4\nyoung\nmarriage\n1.000000\n\n\n\n\n\n\n\n\n\n## 연령대 및 이혼 여부별 빈도\n\n# etc 제외\n# ageg별 분리\n# marriage 추출\n# 빈도 구하기\nwelfare.query('marriage != \"etc\"') \\\n       .groupby('ageg', as_index = False) \\\n       ['marriage'] \\\n       .value_counts()\n\n\n\n\n\n\n\n\n\nageg\nmarriage\ncount\n\n\n\n\n0\nmiddle\nmarriage\n3031\n\n\n1\nmiddle\ndivorce\n268\n\n\n2\nold\nmarriage\n4150\n\n\n3\nold\ndivorce\n421\n\n\n4\nyoung\nmarriage\n9\n\n\n\n\n\n\n\n\n\n\n12.10.2 연령대별 이혼율 그래프 만들기\n\n# 초년층 제외, 이혼 추출\n# 백분율로 바꾸기\n# 반올림\nage_div = age_div.query('ageg != \"young\" & marriage == \"divorce\"') \\\n                 .assign(proportion = age_div['proportion'] * 100) \\\n                 .round(1)\nage_div\n\n\n\n\n\n\n\n\n\nageg\nmarriage\nproportion\n\n\n\n\n1\nmiddle\ndivorce\n8.1\n\n\n3\nold\ndivorce\n9.2\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = age_div, x = 'ageg', y = 'proportion')\n\n\n\n\n\n\n\n\n\n\n12.10.3 연령대 및 종교 유무에 따른 이혼율표 만들기\n\n# etc 제외, 초년층 제외\n# ageg, religion별 분리\n# marriage 추출\n# 비율 구하기\nage_rel_div = welfare.query('marriage != \"etc\" & ageg != \"young\"') \\\n                     .groupby(['ageg', 'religion'], as_index = False) \\\n                     ['marriage'] \\\n                     .value_counts(normalize = True)\n           \nage_rel_div\n\n\n\n\n\n\n\n\n\nageg\nreligion\nmarriage\nproportion\n\n\n\n\n0\nmiddle\nno\nmarriage\n0.913350\n\n\n1\nmiddle\nno\ndivorce\n0.086650\n\n\n2\nmiddle\nyes\nmarriage\n0.926941\n\n\n3\nmiddle\nyes\ndivorce\n0.073059\n\n\n4\nold\nno\nmarriage\n0.896736\n\n\n5\nold\nno\ndivorce\n0.103264\n\n\n6\nold\nyes\nmarriage\n0.916998\n\n\n7\nold\nyes\ndivorce\n0.083002\n\n\n\n\n\n\n\n\n\n\n12.10.4 연령대 및 종교 유무에 따른 이혼율 그래프 만들기\n\n# divorce 추출\n# 백분율로 바꾸기\n# 반올림\nage_rel_div = age_rel_div.query('marriage == \"divorce\"') \\\n                         .assign(proportion = age_rel_div['proportion'] * 100) \\\n                         .round(1)\n                         \nage_rel_div\n\n\n\n\n\n\n\n\n\nageg\nreligion\nmarriage\nproportion\n\n\n\n\n1\nmiddle\nno\ndivorce\n8.7\n\n\n3\nmiddle\nyes\ndivorce\n7.3\n\n\n5\nold\nno\ndivorce\n10.3\n\n\n7\nold\nyes\ndivorce\n8.3\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = age_rel_div, x = 'ageg', y = 'proportion', hue = 'religion')",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "ds-camp10.html#q.-지역별-연령대-비율---어느-지역에-노년층이-많을까",
    "href": "ds-camp10.html#q.-지역별-연령대-비율---어느-지역에-노년층이-많을까",
    "title": "12  ‘한국복지패널 데이터’ 톺아보기",
    "section": "12.11 Q. 지역별 연령대 비율 - 어느 지역에 노년층이 많을까?",
    "text": "12.11 Q. 지역별 연령대 비율 - 어느 지역에 노년층이 많을까?\n\n12.11.1 변수 검토하기\n\nwelfare['code_region'].dtypes  # 변수 타입 출력\n\ndtype('float64')\n\n\n\nwelfare['code_region'].value_counts()  # 빈도 구하기\n\ncode_region\n2.0    3246\n7.0    2466\n3.0    2448\n1.0    2002\n4.0    1728\n5.0    1391\n6.0    1137\nName: count, dtype: int64\n\n\n\n\n12.11.2 전처리하기\n\n# 지역 코드 목록 만들기\nlist_region = pd.DataFrame({'code_region' : [1, 2, 3, 4, 5, 6, 7],\n                            'region'      : ['서울',\n                                             '수도권(인천/경기)',\n                                             '부산/경남/울산',\n                                             '대구/경북',\n                                             '대전/충남',\n                                             '강원/충북',\n                                             '광주/전남/전북/제주도']})\nlist_region\n\n\n\n\n\n\n\n\n\ncode_region\nregion\n\n\n\n\n0\n1\n서울\n\n\n1\n2\n수도권(인천/경기)\n\n\n2\n3\n부산/경남/울산\n\n\n3\n4\n대구/경북\n\n\n4\n5\n대전/충남\n\n\n5\n6\n강원/충북\n\n\n6\n7\n광주/전남/전북/제주도\n\n\n\n\n\n\n\n\n\n# 지역명 변수 추가\nwelfare = welfare.merge(list_region, how = 'left', on = 'code_region')\nwelfare[['code_region', 'region']].head()\n\n\n\n\n\n\n\n\n\ncode_region\nregion\n\n\n\n\n0\n1.0\n서울\n\n\n1\n1.0\n서울\n\n\n2\n1.0\n서울\n\n\n3\n1.0\n서울\n\n\n4\n1.0\n서울\n\n\n\n\n\n\n\n\n\n\n12.11.3 지역별 연령대 비율표 만들기\n\n# region별 분리\n# ageg 추출\n# 비율 구하기\nregion_ageg = welfare.groupby('region', as_index = False) \\\n                     ['ageg'] \\\n                     .value_counts(normalize = True)\nregion_ageg\n\n\n\n\n\n\n\n\n\nregion\nageg\nproportion\n\n\n\n\n0\n강원/충북\nold\n0.509235\n\n\n1\n강원/충북\nmiddle\n0.288478\n\n\n2\n강원/충북\nyoung\n0.202287\n\n\n3\n광주/전남/전북/제주도\nold\n0.492295\n\n\n4\n광주/전남/전북/제주도\nmiddle\n0.307380\n\n\n5\n광주/전남/전북/제주도\nyoung\n0.200324\n\n\n6\n대구/경북\nold\n0.552662\n\n\n7\n대구/경북\nmiddle\n0.280671\n\n\n8\n대구/경북\nyoung\n0.166667\n\n\n9\n대전/충남\nold\n0.453630\n\n\n10\n대전/충남\nmiddle\n0.329978\n\n\n11\n대전/충남\nyoung\n0.216391\n\n\n12\n부산/경남/울산\nold\n0.493873\n\n\n13\n부산/경남/울산\nmiddle\n0.313725\n\n\n14\n부산/경남/울산\nyoung\n0.192402\n\n\n15\n서울\nold\n0.435065\n\n\n16\n서울\nmiddle\n0.377123\n\n\n17\n서울\nyoung\n0.187812\n\n\n18\n수도권(인천/경기)\nold\n0.378312\n\n\n19\n수도권(인천/경기)\nmiddle\n0.377696\n\n\n20\n수도권(인천/경기)\nyoung\n0.243993\n\n\n\n\n\n\n\n\n\n\n12.11.4 그래프 만들기\n\n# 백분율로 바꾸기\n# 반올림\nregion_ageg = region_ageg.assign(proportion = region_ageg['proportion'] * 100) \\\n                         .round(1)\nregion_ageg\n\n\n\n\n\n\n\n\n\nregion\nageg\nproportion\n\n\n\n\n0\n강원/충북\nold\n50.9\n\n\n1\n강원/충북\nmiddle\n28.8\n\n\n2\n강원/충북\nyoung\n20.2\n\n\n3\n광주/전남/전북/제주도\nold\n49.2\n\n\n4\n광주/전남/전북/제주도\nmiddle\n30.7\n\n\n5\n광주/전남/전북/제주도\nyoung\n20.0\n\n\n6\n대구/경북\nold\n55.3\n\n\n7\n대구/경북\nmiddle\n28.1\n\n\n8\n대구/경북\nyoung\n16.7\n\n\n9\n대전/충남\nold\n45.4\n\n\n10\n대전/충남\nmiddle\n33.0\n\n\n11\n대전/충남\nyoung\n21.6\n\n\n12\n부산/경남/울산\nold\n49.4\n\n\n13\n부산/경남/울산\nmiddle\n31.4\n\n\n14\n부산/경남/울산\nyoung\n19.2\n\n\n15\n서울\nold\n43.5\n\n\n16\n서울\nmiddle\n37.7\n\n\n17\n서울\nyoung\n18.8\n\n\n18\n수도권(인천/경기)\nold\n37.8\n\n\n19\n수도권(인천/경기)\nmiddle\n37.8\n\n\n20\n수도권(인천/경기)\nyoung\n24.4\n\n\n\n\n\n\n\n\n\n# 막대 그래프 만들기\nsns.barplot(data = region_ageg, y = 'region', x = 'proportion', hue = 'ageg')\n\n\n\n\n\n\n\n\n\n\n12.11.5 3. 누적 비율 막대 그래프 만들기\n(1) 피벗하기\n\n# 피벗\npivot_df = region_ageg[['region', 'ageg', 'proportion']].pivot(index   = 'region',\n                                                               columns = 'ageg',\n                                                               values  = 'proportion')\npivot_df\n\n\n\n\n\n\n\n\nageg\nmiddle\nold\nyoung\n\n\nregion\n\n\n\n\n\n\n\n강원/충북\n28.8\n50.9\n20.2\n\n\n광주/전남/전북/제주도\n30.7\n49.2\n20.0\n\n\n대구/경북\n28.1\n55.3\n16.7\n\n\n대전/충남\n33.0\n45.4\n21.6\n\n\n부산/경남/울산\n31.4\n49.4\n19.2\n\n\n서울\n37.7\n43.5\n18.8\n\n\n수도권(인천/경기)\n37.8\n37.8\n24.4\n\n\n\n\n\n\n\n\n(2) 그래프 만들기\n\n# 가로 막대 그래프 만들기\npivot_df.plot.barh(stacked = True)\n\n\n\n\n\n\n\n\n(3) 막대 정렬하기\n\n# 노년층 비율 기준 정렬, 변수 순서 바꾸기\nreorder_df = pivot_df.sort_values('old')[['young', 'middle', 'old']]\nreorder_df\n\n\n\n\n\n\n\n\nageg\nyoung\nmiddle\nold\n\n\nregion\n\n\n\n\n\n\n\n수도권(인천/경기)\n24.4\n37.8\n37.8\n\n\n서울\n18.8\n37.7\n43.5\n\n\n대전/충남\n21.6\n33.0\n45.4\n\n\n광주/전남/전북/제주도\n20.0\n30.7\n49.2\n\n\n부산/경남/울산\n19.2\n31.4\n49.4\n\n\n강원/충북\n20.2\n28.8\n50.9\n\n\n대구/경북\n16.7\n28.1\n55.3\n\n\n\n\n\n\n\n\n\n# 누적 가로 막대 그래프 만들기\nreorder_df.plot.barh(stacked = True)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>'한국복지패널 데이터' 톺아보기</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Astrachan, Owen. 2003. “Bubble Sort: An Archaeological Algorithmic\nAnalysis.” ACM Sigcse Bulletin 35 (1): 1–5.\n\n\nHoare, Charles AR. 1962. “Quicksort.” The Computer\nJournal 5 (1): 10–16.\n\n\nKnuth, Donald. 1998. The Art of Computer Programming. Vol. 3 (2nd\nEd.). Addison-Wesley.\n\n\nMishra, Aditya Dev, and Deepak Garg. 2008. “Selection of Best\nSorting Algorithm.” International Journal of Intelligent\nInformation Processing 2 (2): 363–68.\n\n\nSodhi, Tarundeep Singh, Surmeet Kaur, and Snehdeep Kaur. 2013.\n“Enhanced Insertion Sort Algorithm.” International\nJournal of Computer Applications 64 (21).",
    "crumbs": [
      "References"
    ]
  }
]